{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/algorithms/perfect-link.ts","webpack:///./src/index.ts","webpack:///./src/models/model.js","webpack:///./src/system/network-listener.ts","webpack:///./src/system/system.ts","webpack:///./src/utils/constants.ts","webpack:///external \"net\"","webpack:///external \"protobufjs/minimal\""],"names":["$Reader","$protobuf","$Writer","$util","$root","ProcessId","properties","keys","Object","i","length","prototype","host","port","owner","index","rank","create","encode","message","writer","hasOwnProperty","call","uint32","string","int32","encodeDelimited","ldelim","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isString","isInteger","fromObject","object","String","toObject","options","defaults","toJSON","constructor","toJSONOptions","UcPropose","value","EcStartEpoch","newTimestamp","newLeader","fork","error","TypeError","EpAbort","EpInit","valueTimestamp","EpAborted","EpPropose","EpDecide","UcDecide","EpRead_","EpState_","EpWrite_","EpAccept_","EpDecided_","EcNewEpoch_","timestamp","EcNack_","BebBroadcast","Message","BebDeliver","sender","EldRecovery","EldTimeout","EldTrust","processId","EldHeartbeat_","epoch","PlSend","destination","PlDeliver","NetworkMessage","rendezvousPort","AppRegistration","AppPropose","processes","systemId","emptyArray","push","Array","isArray","arrays","j","AppDecide","type","messageUuid","abstractionId","appRegistration","appPropose","appDecide","bebBroadcast","bebDeliver","ecNack_","ecNewEpoch_","ecStartEpoch","eldHeartbeat_","eldRecovery","eldTimeout","eldTrust","epAbort","epAborted","epAccept_","epDecide","epDecided_","epInit","epPropose","epRead_","epState_","epWrite_","plDeliver","plSend","ucDecide","ucPropose","enums","Type","valuesById","values"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { Algorithm } from \"../system/algorithm\";\nimport { IPlSend, IPlDeliver, IMessage, Message } from \"../models/model\";\nimport { System } from \"../system/system\";\n\nexport class PerfectLink implements Algorithm {\n  constructor(private system: System) {}\n\n  private send(plSend: IPlSend) {\n    console.log({ plSend });\n  }\n\n  private deliver(plDeliver: IPlDeliver) {\n    console.log({ plDeliver });\n  }\n\n  public handle(message: IMessage): boolean {\n    if (message.type === Message.Type.PL_SEND) {\n      this.send(message.plSend!);\n      return true;\n    } else if (message.type === Message.Type.PL_DELIVER) {\n      this.deliver(message.plDeliver!);\n      return true;\n    }\n    return false;\n  }\n}\n","import { System } from \"./system/system\";\nimport { NetworkListener } from \"./system/network-listener\";\n\nif (!process.argv[2] || isNaN(parseInt(process.argv[2]))) {\n  console.log(\"No port or invalid port specified, default to 5000.\");\n}\nconst port = parseInt(process.argv[2]) || 5000;\n\nconst networkListener = new NetworkListener(port);\nconst system = new System();","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\nimport * as $protobuf from \"protobufjs/minimal\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const ProcessId = $root.ProcessId = (() => {\n\n    /**\n     * Properties of a ProcessId.\n     * @exports IProcessId\n     * @interface IProcessId\n     * @property {string|null} [host] ProcessId host\n     * @property {number|null} [port] ProcessId port\n     * @property {string|null} [owner] ProcessId owner\n     * @property {number|null} [index] ProcessId index\n     * @property {number|null} [rank] ProcessId rank\n     */\n\n    /**\n     * Constructs a new ProcessId.\n     * @exports ProcessId\n     * @classdesc Represents a ProcessId.\n     * @implements IProcessId\n     * @constructor\n     * @param {IProcessId=} [properties] Properties to set\n     */\n    function ProcessId(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ProcessId host.\n     * @member {string} host\n     * @memberof ProcessId\n     * @instance\n     */\n    ProcessId.prototype.host = \"\";\n\n    /**\n     * ProcessId port.\n     * @member {number} port\n     * @memberof ProcessId\n     * @instance\n     */\n    ProcessId.prototype.port = 0;\n\n    /**\n     * ProcessId owner.\n     * @member {string} owner\n     * @memberof ProcessId\n     * @instance\n     */\n    ProcessId.prototype.owner = \"\";\n\n    /**\n     * ProcessId index.\n     * @member {number} index\n     * @memberof ProcessId\n     * @instance\n     */\n    ProcessId.prototype.index = 0;\n\n    /**\n     * ProcessId rank.\n     * @member {number} rank\n     * @memberof ProcessId\n     * @instance\n     */\n    ProcessId.prototype.rank = 0;\n\n    /**\n     * Creates a new ProcessId instance using the specified properties.\n     * @function create\n     * @memberof ProcessId\n     * @static\n     * @param {IProcessId=} [properties] Properties to set\n     * @returns {ProcessId} ProcessId instance\n     */\n    ProcessId.create = function create(properties) {\n        return new ProcessId(properties);\n    };\n\n    /**\n     * Encodes the specified ProcessId message. Does not implicitly {@link ProcessId.verify|verify} messages.\n     * @function encode\n     * @memberof ProcessId\n     * @static\n     * @param {IProcessId} message ProcessId message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ProcessId.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.host != null && Object.hasOwnProperty.call(message, \"host\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.host);\n        if (message.port != null && Object.hasOwnProperty.call(message, \"port\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.port);\n        if (message.owner != null && Object.hasOwnProperty.call(message, \"owner\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.owner);\n        if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.index);\n        if (message.rank != null && Object.hasOwnProperty.call(message, \"rank\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.rank);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ProcessId message, length delimited. Does not implicitly {@link ProcessId.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ProcessId\n     * @static\n     * @param {IProcessId} message ProcessId message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ProcessId.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ProcessId message from the specified reader or buffer.\n     * @function decode\n     * @memberof ProcessId\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ProcessId} ProcessId\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ProcessId.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProcessId();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.host = reader.string();\n                break;\n            case 2:\n                message.port = reader.int32();\n                break;\n            case 3:\n                message.owner = reader.string();\n                break;\n            case 4:\n                message.index = reader.int32();\n                break;\n            case 5:\n                message.rank = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ProcessId message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ProcessId\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ProcessId} ProcessId\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ProcessId.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ProcessId message.\n     * @function verify\n     * @memberof ProcessId\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ProcessId.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.host != null && message.hasOwnProperty(\"host\"))\n            if (!$util.isString(message.host))\n                return \"host: string expected\";\n        if (message.port != null && message.hasOwnProperty(\"port\"))\n            if (!$util.isInteger(message.port))\n                return \"port: integer expected\";\n        if (message.owner != null && message.hasOwnProperty(\"owner\"))\n            if (!$util.isString(message.owner))\n                return \"owner: string expected\";\n        if (message.index != null && message.hasOwnProperty(\"index\"))\n            if (!$util.isInteger(message.index))\n                return \"index: integer expected\";\n        if (message.rank != null && message.hasOwnProperty(\"rank\"))\n            if (!$util.isInteger(message.rank))\n                return \"rank: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ProcessId message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ProcessId\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ProcessId} ProcessId\n     */\n    ProcessId.fromObject = function fromObject(object) {\n        if (object instanceof $root.ProcessId)\n            return object;\n        let message = new $root.ProcessId();\n        if (object.host != null)\n            message.host = String(object.host);\n        if (object.port != null)\n            message.port = object.port | 0;\n        if (object.owner != null)\n            message.owner = String(object.owner);\n        if (object.index != null)\n            message.index = object.index | 0;\n        if (object.rank != null)\n            message.rank = object.rank | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ProcessId message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ProcessId\n     * @static\n     * @param {ProcessId} message ProcessId\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ProcessId.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.host = \"\";\n            object.port = 0;\n            object.owner = \"\";\n            object.index = 0;\n            object.rank = 0;\n        }\n        if (message.host != null && message.hasOwnProperty(\"host\"))\n            object.host = message.host;\n        if (message.port != null && message.hasOwnProperty(\"port\"))\n            object.port = message.port;\n        if (message.owner != null && message.hasOwnProperty(\"owner\"))\n            object.owner = message.owner;\n        if (message.index != null && message.hasOwnProperty(\"index\"))\n            object.index = message.index;\n        if (message.rank != null && message.hasOwnProperty(\"rank\"))\n            object.rank = message.rank;\n        return object;\n    };\n\n    /**\n     * Converts this ProcessId to JSON.\n     * @function toJSON\n     * @memberof ProcessId\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ProcessId.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ProcessId;\n})();\n\nexport const UcPropose = $root.UcPropose = (() => {\n\n    /**\n     * Properties of an UcPropose.\n     * @exports IUcPropose\n     * @interface IUcPropose\n     * @property {number|null} [value] UcPropose value\n     */\n\n    /**\n     * Constructs a new UcPropose.\n     * @exports UcPropose\n     * @classdesc Represents an UcPropose.\n     * @implements IUcPropose\n     * @constructor\n     * @param {IUcPropose=} [properties] Properties to set\n     */\n    function UcPropose(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UcPropose value.\n     * @member {number} value\n     * @memberof UcPropose\n     * @instance\n     */\n    UcPropose.prototype.value = 0;\n\n    /**\n     * Creates a new UcPropose instance using the specified properties.\n     * @function create\n     * @memberof UcPropose\n     * @static\n     * @param {IUcPropose=} [properties] Properties to set\n     * @returns {UcPropose} UcPropose instance\n     */\n    UcPropose.create = function create(properties) {\n        return new UcPropose(properties);\n    };\n\n    /**\n     * Encodes the specified UcPropose message. Does not implicitly {@link UcPropose.verify|verify} messages.\n     * @function encode\n     * @memberof UcPropose\n     * @static\n     * @param {IUcPropose} message UcPropose message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UcPropose.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UcPropose message, length delimited. Does not implicitly {@link UcPropose.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UcPropose\n     * @static\n     * @param {IUcPropose} message UcPropose message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UcPropose.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an UcPropose message from the specified reader or buffer.\n     * @function decode\n     * @memberof UcPropose\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UcPropose} UcPropose\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UcPropose.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.UcPropose();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.value = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an UcPropose message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UcPropose\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UcPropose} UcPropose\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UcPropose.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an UcPropose message.\n     * @function verify\n     * @memberof UcPropose\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UcPropose.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            if (!$util.isInteger(message.value))\n                return \"value: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an UcPropose message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UcPropose\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UcPropose} UcPropose\n     */\n    UcPropose.fromObject = function fromObject(object) {\n        if (object instanceof $root.UcPropose)\n            return object;\n        let message = new $root.UcPropose();\n        if (object.value != null)\n            message.value = object.value | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an UcPropose message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UcPropose\n     * @static\n     * @param {UcPropose} message UcPropose\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UcPropose.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.value = 0;\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            object.value = message.value;\n        return object;\n    };\n\n    /**\n     * Converts this UcPropose to JSON.\n     * @function toJSON\n     * @memberof UcPropose\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UcPropose.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UcPropose;\n})();\n\nexport const EcStartEpoch = $root.EcStartEpoch = (() => {\n\n    /**\n     * Properties of an EcStartEpoch.\n     * @exports IEcStartEpoch\n     * @interface IEcStartEpoch\n     * @property {number|null} [newTimestamp] EcStartEpoch newTimestamp\n     * @property {IProcessId|null} [newLeader] EcStartEpoch newLeader\n     */\n\n    /**\n     * Constructs a new EcStartEpoch.\n     * @exports EcStartEpoch\n     * @classdesc Represents an EcStartEpoch.\n     * @implements IEcStartEpoch\n     * @constructor\n     * @param {IEcStartEpoch=} [properties] Properties to set\n     */\n    function EcStartEpoch(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EcStartEpoch newTimestamp.\n     * @member {number} newTimestamp\n     * @memberof EcStartEpoch\n     * @instance\n     */\n    EcStartEpoch.prototype.newTimestamp = 0;\n\n    /**\n     * EcStartEpoch newLeader.\n     * @member {IProcessId|null|undefined} newLeader\n     * @memberof EcStartEpoch\n     * @instance\n     */\n    EcStartEpoch.prototype.newLeader = null;\n\n    /**\n     * Creates a new EcStartEpoch instance using the specified properties.\n     * @function create\n     * @memberof EcStartEpoch\n     * @static\n     * @param {IEcStartEpoch=} [properties] Properties to set\n     * @returns {EcStartEpoch} EcStartEpoch instance\n     */\n    EcStartEpoch.create = function create(properties) {\n        return new EcStartEpoch(properties);\n    };\n\n    /**\n     * Encodes the specified EcStartEpoch message. Does not implicitly {@link EcStartEpoch.verify|verify} messages.\n     * @function encode\n     * @memberof EcStartEpoch\n     * @static\n     * @param {IEcStartEpoch} message EcStartEpoch message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EcStartEpoch.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.newTimestamp != null && Object.hasOwnProperty.call(message, \"newTimestamp\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.newTimestamp);\n        if (message.newLeader != null && Object.hasOwnProperty.call(message, \"newLeader\"))\n            $root.ProcessId.encode(message.newLeader, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EcStartEpoch message, length delimited. Does not implicitly {@link EcStartEpoch.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EcStartEpoch\n     * @static\n     * @param {IEcStartEpoch} message EcStartEpoch message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EcStartEpoch.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EcStartEpoch message from the specified reader or buffer.\n     * @function decode\n     * @memberof EcStartEpoch\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EcStartEpoch} EcStartEpoch\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EcStartEpoch.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EcStartEpoch();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.newTimestamp = reader.int32();\n                break;\n            case 2:\n                message.newLeader = $root.ProcessId.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EcStartEpoch message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EcStartEpoch\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EcStartEpoch} EcStartEpoch\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EcStartEpoch.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EcStartEpoch message.\n     * @function verify\n     * @memberof EcStartEpoch\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EcStartEpoch.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.newTimestamp != null && message.hasOwnProperty(\"newTimestamp\"))\n            if (!$util.isInteger(message.newTimestamp))\n                return \"newTimestamp: integer expected\";\n        if (message.newLeader != null && message.hasOwnProperty(\"newLeader\")) {\n            let error = $root.ProcessId.verify(message.newLeader);\n            if (error)\n                return \"newLeader.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates an EcStartEpoch message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EcStartEpoch\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EcStartEpoch} EcStartEpoch\n     */\n    EcStartEpoch.fromObject = function fromObject(object) {\n        if (object instanceof $root.EcStartEpoch)\n            return object;\n        let message = new $root.EcStartEpoch();\n        if (object.newTimestamp != null)\n            message.newTimestamp = object.newTimestamp | 0;\n        if (object.newLeader != null) {\n            if (typeof object.newLeader !== \"object\")\n                throw TypeError(\".EcStartEpoch.newLeader: object expected\");\n            message.newLeader = $root.ProcessId.fromObject(object.newLeader);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an EcStartEpoch message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EcStartEpoch\n     * @static\n     * @param {EcStartEpoch} message EcStartEpoch\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EcStartEpoch.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.newTimestamp = 0;\n            object.newLeader = null;\n        }\n        if (message.newTimestamp != null && message.hasOwnProperty(\"newTimestamp\"))\n            object.newTimestamp = message.newTimestamp;\n        if (message.newLeader != null && message.hasOwnProperty(\"newLeader\"))\n            object.newLeader = $root.ProcessId.toObject(message.newLeader, options);\n        return object;\n    };\n\n    /**\n     * Converts this EcStartEpoch to JSON.\n     * @function toJSON\n     * @memberof EcStartEpoch\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EcStartEpoch.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EcStartEpoch;\n})();\n\nexport const EpAbort = $root.EpAbort = (() => {\n\n    /**\n     * Properties of an EpAbort.\n     * @exports IEpAbort\n     * @interface IEpAbort\n     */\n\n    /**\n     * Constructs a new EpAbort.\n     * @exports EpAbort\n     * @classdesc Represents an EpAbort.\n     * @implements IEpAbort\n     * @constructor\n     * @param {IEpAbort=} [properties] Properties to set\n     */\n    function EpAbort(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new EpAbort instance using the specified properties.\n     * @function create\n     * @memberof EpAbort\n     * @static\n     * @param {IEpAbort=} [properties] Properties to set\n     * @returns {EpAbort} EpAbort instance\n     */\n    EpAbort.create = function create(properties) {\n        return new EpAbort(properties);\n    };\n\n    /**\n     * Encodes the specified EpAbort message. Does not implicitly {@link EpAbort.verify|verify} messages.\n     * @function encode\n     * @memberof EpAbort\n     * @static\n     * @param {IEpAbort} message EpAbort message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpAbort.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EpAbort message, length delimited. Does not implicitly {@link EpAbort.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EpAbort\n     * @static\n     * @param {IEpAbort} message EpAbort message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpAbort.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EpAbort message from the specified reader or buffer.\n     * @function decode\n     * @memberof EpAbort\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EpAbort} EpAbort\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpAbort.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EpAbort();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EpAbort message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EpAbort\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EpAbort} EpAbort\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpAbort.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EpAbort message.\n     * @function verify\n     * @memberof EpAbort\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EpAbort.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EpAbort message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EpAbort\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EpAbort} EpAbort\n     */\n    EpAbort.fromObject = function fromObject(object) {\n        if (object instanceof $root.EpAbort)\n            return object;\n        return new $root.EpAbort();\n    };\n\n    /**\n     * Creates a plain object from an EpAbort message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EpAbort\n     * @static\n     * @param {EpAbort} message EpAbort\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EpAbort.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this EpAbort to JSON.\n     * @function toJSON\n     * @memberof EpAbort\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EpAbort.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EpAbort;\n})();\n\nexport const EpInit = $root.EpInit = (() => {\n\n    /**\n     * Properties of an EpInit.\n     * @exports IEpInit\n     * @interface IEpInit\n     * @property {number|null} [valueTimestamp] EpInit valueTimestamp\n     * @property {number|null} [value] EpInit value\n     */\n\n    /**\n     * Constructs a new EpInit.\n     * @exports EpInit\n     * @classdesc Represents an EpInit.\n     * @implements IEpInit\n     * @constructor\n     * @param {IEpInit=} [properties] Properties to set\n     */\n    function EpInit(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EpInit valueTimestamp.\n     * @member {number} valueTimestamp\n     * @memberof EpInit\n     * @instance\n     */\n    EpInit.prototype.valueTimestamp = 0;\n\n    /**\n     * EpInit value.\n     * @member {number} value\n     * @memberof EpInit\n     * @instance\n     */\n    EpInit.prototype.value = 0;\n\n    /**\n     * Creates a new EpInit instance using the specified properties.\n     * @function create\n     * @memberof EpInit\n     * @static\n     * @param {IEpInit=} [properties] Properties to set\n     * @returns {EpInit} EpInit instance\n     */\n    EpInit.create = function create(properties) {\n        return new EpInit(properties);\n    };\n\n    /**\n     * Encodes the specified EpInit message. Does not implicitly {@link EpInit.verify|verify} messages.\n     * @function encode\n     * @memberof EpInit\n     * @static\n     * @param {IEpInit} message EpInit message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpInit.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.valueTimestamp != null && Object.hasOwnProperty.call(message, \"valueTimestamp\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.valueTimestamp);\n        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.value);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EpInit message, length delimited. Does not implicitly {@link EpInit.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EpInit\n     * @static\n     * @param {IEpInit} message EpInit message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpInit.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EpInit message from the specified reader or buffer.\n     * @function decode\n     * @memberof EpInit\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EpInit} EpInit\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpInit.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EpInit();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.valueTimestamp = reader.int32();\n                break;\n            case 2:\n                message.value = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EpInit message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EpInit\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EpInit} EpInit\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpInit.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EpInit message.\n     * @function verify\n     * @memberof EpInit\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EpInit.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.valueTimestamp != null && message.hasOwnProperty(\"valueTimestamp\"))\n            if (!$util.isInteger(message.valueTimestamp))\n                return \"valueTimestamp: integer expected\";\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            if (!$util.isInteger(message.value))\n                return \"value: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EpInit message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EpInit\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EpInit} EpInit\n     */\n    EpInit.fromObject = function fromObject(object) {\n        if (object instanceof $root.EpInit)\n            return object;\n        let message = new $root.EpInit();\n        if (object.valueTimestamp != null)\n            message.valueTimestamp = object.valueTimestamp | 0;\n        if (object.value != null)\n            message.value = object.value | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an EpInit message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EpInit\n     * @static\n     * @param {EpInit} message EpInit\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EpInit.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.valueTimestamp = 0;\n            object.value = 0;\n        }\n        if (message.valueTimestamp != null && message.hasOwnProperty(\"valueTimestamp\"))\n            object.valueTimestamp = message.valueTimestamp;\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            object.value = message.value;\n        return object;\n    };\n\n    /**\n     * Converts this EpInit to JSON.\n     * @function toJSON\n     * @memberof EpInit\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EpInit.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EpInit;\n})();\n\nexport const EpAborted = $root.EpAborted = (() => {\n\n    /**\n     * Properties of an EpAborted.\n     * @exports IEpAborted\n     * @interface IEpAborted\n     * @property {number|null} [valueTimestamp] EpAborted valueTimestamp\n     * @property {number|null} [value] EpAborted value\n     */\n\n    /**\n     * Constructs a new EpAborted.\n     * @exports EpAborted\n     * @classdesc Represents an EpAborted.\n     * @implements IEpAborted\n     * @constructor\n     * @param {IEpAborted=} [properties] Properties to set\n     */\n    function EpAborted(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EpAborted valueTimestamp.\n     * @member {number} valueTimestamp\n     * @memberof EpAborted\n     * @instance\n     */\n    EpAborted.prototype.valueTimestamp = 0;\n\n    /**\n     * EpAborted value.\n     * @member {number} value\n     * @memberof EpAborted\n     * @instance\n     */\n    EpAborted.prototype.value = 0;\n\n    /**\n     * Creates a new EpAborted instance using the specified properties.\n     * @function create\n     * @memberof EpAborted\n     * @static\n     * @param {IEpAborted=} [properties] Properties to set\n     * @returns {EpAborted} EpAborted instance\n     */\n    EpAborted.create = function create(properties) {\n        return new EpAborted(properties);\n    };\n\n    /**\n     * Encodes the specified EpAborted message. Does not implicitly {@link EpAborted.verify|verify} messages.\n     * @function encode\n     * @memberof EpAborted\n     * @static\n     * @param {IEpAborted} message EpAborted message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpAborted.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.valueTimestamp != null && Object.hasOwnProperty.call(message, \"valueTimestamp\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.valueTimestamp);\n        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.value);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EpAborted message, length delimited. Does not implicitly {@link EpAborted.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EpAborted\n     * @static\n     * @param {IEpAborted} message EpAborted message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpAborted.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EpAborted message from the specified reader or buffer.\n     * @function decode\n     * @memberof EpAborted\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EpAborted} EpAborted\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpAborted.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EpAborted();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.valueTimestamp = reader.int32();\n                break;\n            case 2:\n                message.value = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EpAborted message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EpAborted\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EpAborted} EpAborted\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpAborted.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EpAborted message.\n     * @function verify\n     * @memberof EpAborted\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EpAborted.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.valueTimestamp != null && message.hasOwnProperty(\"valueTimestamp\"))\n            if (!$util.isInteger(message.valueTimestamp))\n                return \"valueTimestamp: integer expected\";\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            if (!$util.isInteger(message.value))\n                return \"value: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EpAborted message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EpAborted\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EpAborted} EpAborted\n     */\n    EpAborted.fromObject = function fromObject(object) {\n        if (object instanceof $root.EpAborted)\n            return object;\n        let message = new $root.EpAborted();\n        if (object.valueTimestamp != null)\n            message.valueTimestamp = object.valueTimestamp | 0;\n        if (object.value != null)\n            message.value = object.value | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an EpAborted message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EpAborted\n     * @static\n     * @param {EpAborted} message EpAborted\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EpAborted.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.valueTimestamp = 0;\n            object.value = 0;\n        }\n        if (message.valueTimestamp != null && message.hasOwnProperty(\"valueTimestamp\"))\n            object.valueTimestamp = message.valueTimestamp;\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            object.value = message.value;\n        return object;\n    };\n\n    /**\n     * Converts this EpAborted to JSON.\n     * @function toJSON\n     * @memberof EpAborted\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EpAborted.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EpAborted;\n})();\n\nexport const EpPropose = $root.EpPropose = (() => {\n\n    /**\n     * Properties of an EpPropose.\n     * @exports IEpPropose\n     * @interface IEpPropose\n     * @property {number|null} [value] EpPropose value\n     */\n\n    /**\n     * Constructs a new EpPropose.\n     * @exports EpPropose\n     * @classdesc Represents an EpPropose.\n     * @implements IEpPropose\n     * @constructor\n     * @param {IEpPropose=} [properties] Properties to set\n     */\n    function EpPropose(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EpPropose value.\n     * @member {number} value\n     * @memberof EpPropose\n     * @instance\n     */\n    EpPropose.prototype.value = 0;\n\n    /**\n     * Creates a new EpPropose instance using the specified properties.\n     * @function create\n     * @memberof EpPropose\n     * @static\n     * @param {IEpPropose=} [properties] Properties to set\n     * @returns {EpPropose} EpPropose instance\n     */\n    EpPropose.create = function create(properties) {\n        return new EpPropose(properties);\n    };\n\n    /**\n     * Encodes the specified EpPropose message. Does not implicitly {@link EpPropose.verify|verify} messages.\n     * @function encode\n     * @memberof EpPropose\n     * @static\n     * @param {IEpPropose} message EpPropose message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpPropose.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EpPropose message, length delimited. Does not implicitly {@link EpPropose.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EpPropose\n     * @static\n     * @param {IEpPropose} message EpPropose message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpPropose.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EpPropose message from the specified reader or buffer.\n     * @function decode\n     * @memberof EpPropose\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EpPropose} EpPropose\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpPropose.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EpPropose();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.value = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EpPropose message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EpPropose\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EpPropose} EpPropose\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpPropose.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EpPropose message.\n     * @function verify\n     * @memberof EpPropose\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EpPropose.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            if (!$util.isInteger(message.value))\n                return \"value: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EpPropose message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EpPropose\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EpPropose} EpPropose\n     */\n    EpPropose.fromObject = function fromObject(object) {\n        if (object instanceof $root.EpPropose)\n            return object;\n        let message = new $root.EpPropose();\n        if (object.value != null)\n            message.value = object.value | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an EpPropose message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EpPropose\n     * @static\n     * @param {EpPropose} message EpPropose\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EpPropose.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.value = 0;\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            object.value = message.value;\n        return object;\n    };\n\n    /**\n     * Converts this EpPropose to JSON.\n     * @function toJSON\n     * @memberof EpPropose\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EpPropose.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EpPropose;\n})();\n\nexport const EpDecide = $root.EpDecide = (() => {\n\n    /**\n     * Properties of an EpDecide.\n     * @exports IEpDecide\n     * @interface IEpDecide\n     * @property {number|null} [value] EpDecide value\n     */\n\n    /**\n     * Constructs a new EpDecide.\n     * @exports EpDecide\n     * @classdesc Represents an EpDecide.\n     * @implements IEpDecide\n     * @constructor\n     * @param {IEpDecide=} [properties] Properties to set\n     */\n    function EpDecide(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EpDecide value.\n     * @member {number} value\n     * @memberof EpDecide\n     * @instance\n     */\n    EpDecide.prototype.value = 0;\n\n    /**\n     * Creates a new EpDecide instance using the specified properties.\n     * @function create\n     * @memberof EpDecide\n     * @static\n     * @param {IEpDecide=} [properties] Properties to set\n     * @returns {EpDecide} EpDecide instance\n     */\n    EpDecide.create = function create(properties) {\n        return new EpDecide(properties);\n    };\n\n    /**\n     * Encodes the specified EpDecide message. Does not implicitly {@link EpDecide.verify|verify} messages.\n     * @function encode\n     * @memberof EpDecide\n     * @static\n     * @param {IEpDecide} message EpDecide message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpDecide.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EpDecide message, length delimited. Does not implicitly {@link EpDecide.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EpDecide\n     * @static\n     * @param {IEpDecide} message EpDecide message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpDecide.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EpDecide message from the specified reader or buffer.\n     * @function decode\n     * @memberof EpDecide\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EpDecide} EpDecide\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpDecide.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EpDecide();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.value = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EpDecide message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EpDecide\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EpDecide} EpDecide\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpDecide.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EpDecide message.\n     * @function verify\n     * @memberof EpDecide\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EpDecide.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            if (!$util.isInteger(message.value))\n                return \"value: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EpDecide message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EpDecide\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EpDecide} EpDecide\n     */\n    EpDecide.fromObject = function fromObject(object) {\n        if (object instanceof $root.EpDecide)\n            return object;\n        let message = new $root.EpDecide();\n        if (object.value != null)\n            message.value = object.value | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an EpDecide message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EpDecide\n     * @static\n     * @param {EpDecide} message EpDecide\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EpDecide.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.value = 0;\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            object.value = message.value;\n        return object;\n    };\n\n    /**\n     * Converts this EpDecide to JSON.\n     * @function toJSON\n     * @memberof EpDecide\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EpDecide.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EpDecide;\n})();\n\nexport const UcDecide = $root.UcDecide = (() => {\n\n    /**\n     * Properties of an UcDecide.\n     * @exports IUcDecide\n     * @interface IUcDecide\n     * @property {number|null} [value] UcDecide value\n     */\n\n    /**\n     * Constructs a new UcDecide.\n     * @exports UcDecide\n     * @classdesc Represents an UcDecide.\n     * @implements IUcDecide\n     * @constructor\n     * @param {IUcDecide=} [properties] Properties to set\n     */\n    function UcDecide(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UcDecide value.\n     * @member {number} value\n     * @memberof UcDecide\n     * @instance\n     */\n    UcDecide.prototype.value = 0;\n\n    /**\n     * Creates a new UcDecide instance using the specified properties.\n     * @function create\n     * @memberof UcDecide\n     * @static\n     * @param {IUcDecide=} [properties] Properties to set\n     * @returns {UcDecide} UcDecide instance\n     */\n    UcDecide.create = function create(properties) {\n        return new UcDecide(properties);\n    };\n\n    /**\n     * Encodes the specified UcDecide message. Does not implicitly {@link UcDecide.verify|verify} messages.\n     * @function encode\n     * @memberof UcDecide\n     * @static\n     * @param {IUcDecide} message UcDecide message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UcDecide.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UcDecide message, length delimited. Does not implicitly {@link UcDecide.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UcDecide\n     * @static\n     * @param {IUcDecide} message UcDecide message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UcDecide.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an UcDecide message from the specified reader or buffer.\n     * @function decode\n     * @memberof UcDecide\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UcDecide} UcDecide\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UcDecide.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.UcDecide();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.value = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an UcDecide message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UcDecide\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UcDecide} UcDecide\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UcDecide.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an UcDecide message.\n     * @function verify\n     * @memberof UcDecide\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UcDecide.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            if (!$util.isInteger(message.value))\n                return \"value: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an UcDecide message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UcDecide\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UcDecide} UcDecide\n     */\n    UcDecide.fromObject = function fromObject(object) {\n        if (object instanceof $root.UcDecide)\n            return object;\n        let message = new $root.UcDecide();\n        if (object.value != null)\n            message.value = object.value | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an UcDecide message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UcDecide\n     * @static\n     * @param {UcDecide} message UcDecide\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UcDecide.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.value = 0;\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            object.value = message.value;\n        return object;\n    };\n\n    /**\n     * Converts this UcDecide to JSON.\n     * @function toJSON\n     * @memberof UcDecide\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UcDecide.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UcDecide;\n})();\n\nexport const EpRead_ = $root.EpRead_ = (() => {\n\n    /**\n     * Properties of an EpRead_.\n     * @exports IEpRead_\n     * @interface IEpRead_\n     */\n\n    /**\n     * Constructs a new EpRead_.\n     * @exports EpRead_\n     * @classdesc Represents an EpRead_.\n     * @implements IEpRead_\n     * @constructor\n     * @param {IEpRead_=} [properties] Properties to set\n     */\n    function EpRead_(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new EpRead_ instance using the specified properties.\n     * @function create\n     * @memberof EpRead_\n     * @static\n     * @param {IEpRead_=} [properties] Properties to set\n     * @returns {EpRead_} EpRead_ instance\n     */\n    EpRead_.create = function create(properties) {\n        return new EpRead_(properties);\n    };\n\n    /**\n     * Encodes the specified EpRead_ message. Does not implicitly {@link EpRead_.verify|verify} messages.\n     * @function encode\n     * @memberof EpRead_\n     * @static\n     * @param {IEpRead_} message EpRead_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpRead_.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EpRead_ message, length delimited. Does not implicitly {@link EpRead_.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EpRead_\n     * @static\n     * @param {IEpRead_} message EpRead_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpRead_.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EpRead_ message from the specified reader or buffer.\n     * @function decode\n     * @memberof EpRead_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EpRead_} EpRead_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpRead_.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EpRead_();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EpRead_ message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EpRead_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EpRead_} EpRead_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpRead_.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EpRead_ message.\n     * @function verify\n     * @memberof EpRead_\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EpRead_.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EpRead_ message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EpRead_\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EpRead_} EpRead_\n     */\n    EpRead_.fromObject = function fromObject(object) {\n        if (object instanceof $root.EpRead_)\n            return object;\n        return new $root.EpRead_();\n    };\n\n    /**\n     * Creates a plain object from an EpRead_ message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EpRead_\n     * @static\n     * @param {EpRead_} message EpRead_\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EpRead_.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this EpRead_ to JSON.\n     * @function toJSON\n     * @memberof EpRead_\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EpRead_.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EpRead_;\n})();\n\nexport const EpState_ = $root.EpState_ = (() => {\n\n    /**\n     * Properties of an EpState_.\n     * @exports IEpState_\n     * @interface IEpState_\n     * @property {number|null} [valueTimestamp] EpState_ valueTimestamp\n     * @property {number|null} [value] EpState_ value\n     */\n\n    /**\n     * Constructs a new EpState_.\n     * @exports EpState_\n     * @classdesc Represents an EpState_.\n     * @implements IEpState_\n     * @constructor\n     * @param {IEpState_=} [properties] Properties to set\n     */\n    function EpState_(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EpState_ valueTimestamp.\n     * @member {number} valueTimestamp\n     * @memberof EpState_\n     * @instance\n     */\n    EpState_.prototype.valueTimestamp = 0;\n\n    /**\n     * EpState_ value.\n     * @member {number} value\n     * @memberof EpState_\n     * @instance\n     */\n    EpState_.prototype.value = 0;\n\n    /**\n     * Creates a new EpState_ instance using the specified properties.\n     * @function create\n     * @memberof EpState_\n     * @static\n     * @param {IEpState_=} [properties] Properties to set\n     * @returns {EpState_} EpState_ instance\n     */\n    EpState_.create = function create(properties) {\n        return new EpState_(properties);\n    };\n\n    /**\n     * Encodes the specified EpState_ message. Does not implicitly {@link EpState_.verify|verify} messages.\n     * @function encode\n     * @memberof EpState_\n     * @static\n     * @param {IEpState_} message EpState_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpState_.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.valueTimestamp != null && Object.hasOwnProperty.call(message, \"valueTimestamp\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.valueTimestamp);\n        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.value);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EpState_ message, length delimited. Does not implicitly {@link EpState_.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EpState_\n     * @static\n     * @param {IEpState_} message EpState_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpState_.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EpState_ message from the specified reader or buffer.\n     * @function decode\n     * @memberof EpState_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EpState_} EpState_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpState_.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EpState_();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.valueTimestamp = reader.int32();\n                break;\n            case 2:\n                message.value = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EpState_ message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EpState_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EpState_} EpState_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpState_.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EpState_ message.\n     * @function verify\n     * @memberof EpState_\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EpState_.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.valueTimestamp != null && message.hasOwnProperty(\"valueTimestamp\"))\n            if (!$util.isInteger(message.valueTimestamp))\n                return \"valueTimestamp: integer expected\";\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            if (!$util.isInteger(message.value))\n                return \"value: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EpState_ message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EpState_\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EpState_} EpState_\n     */\n    EpState_.fromObject = function fromObject(object) {\n        if (object instanceof $root.EpState_)\n            return object;\n        let message = new $root.EpState_();\n        if (object.valueTimestamp != null)\n            message.valueTimestamp = object.valueTimestamp | 0;\n        if (object.value != null)\n            message.value = object.value | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an EpState_ message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EpState_\n     * @static\n     * @param {EpState_} message EpState_\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EpState_.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.valueTimestamp = 0;\n            object.value = 0;\n        }\n        if (message.valueTimestamp != null && message.hasOwnProperty(\"valueTimestamp\"))\n            object.valueTimestamp = message.valueTimestamp;\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            object.value = message.value;\n        return object;\n    };\n\n    /**\n     * Converts this EpState_ to JSON.\n     * @function toJSON\n     * @memberof EpState_\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EpState_.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EpState_;\n})();\n\nexport const EpWrite_ = $root.EpWrite_ = (() => {\n\n    /**\n     * Properties of an EpWrite_.\n     * @exports IEpWrite_\n     * @interface IEpWrite_\n     * @property {number|null} [value] EpWrite_ value\n     */\n\n    /**\n     * Constructs a new EpWrite_.\n     * @exports EpWrite_\n     * @classdesc Represents an EpWrite_.\n     * @implements IEpWrite_\n     * @constructor\n     * @param {IEpWrite_=} [properties] Properties to set\n     */\n    function EpWrite_(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EpWrite_ value.\n     * @member {number} value\n     * @memberof EpWrite_\n     * @instance\n     */\n    EpWrite_.prototype.value = 0;\n\n    /**\n     * Creates a new EpWrite_ instance using the specified properties.\n     * @function create\n     * @memberof EpWrite_\n     * @static\n     * @param {IEpWrite_=} [properties] Properties to set\n     * @returns {EpWrite_} EpWrite_ instance\n     */\n    EpWrite_.create = function create(properties) {\n        return new EpWrite_(properties);\n    };\n\n    /**\n     * Encodes the specified EpWrite_ message. Does not implicitly {@link EpWrite_.verify|verify} messages.\n     * @function encode\n     * @memberof EpWrite_\n     * @static\n     * @param {IEpWrite_} message EpWrite_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpWrite_.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EpWrite_ message, length delimited. Does not implicitly {@link EpWrite_.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EpWrite_\n     * @static\n     * @param {IEpWrite_} message EpWrite_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpWrite_.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EpWrite_ message from the specified reader or buffer.\n     * @function decode\n     * @memberof EpWrite_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EpWrite_} EpWrite_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpWrite_.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EpWrite_();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.value = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EpWrite_ message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EpWrite_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EpWrite_} EpWrite_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpWrite_.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EpWrite_ message.\n     * @function verify\n     * @memberof EpWrite_\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EpWrite_.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            if (!$util.isInteger(message.value))\n                return \"value: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EpWrite_ message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EpWrite_\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EpWrite_} EpWrite_\n     */\n    EpWrite_.fromObject = function fromObject(object) {\n        if (object instanceof $root.EpWrite_)\n            return object;\n        let message = new $root.EpWrite_();\n        if (object.value != null)\n            message.value = object.value | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an EpWrite_ message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EpWrite_\n     * @static\n     * @param {EpWrite_} message EpWrite_\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EpWrite_.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.value = 0;\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            object.value = message.value;\n        return object;\n    };\n\n    /**\n     * Converts this EpWrite_ to JSON.\n     * @function toJSON\n     * @memberof EpWrite_\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EpWrite_.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EpWrite_;\n})();\n\nexport const EpAccept_ = $root.EpAccept_ = (() => {\n\n    /**\n     * Properties of an EpAccept_.\n     * @exports IEpAccept_\n     * @interface IEpAccept_\n     */\n\n    /**\n     * Constructs a new EpAccept_.\n     * @exports EpAccept_\n     * @classdesc Represents an EpAccept_.\n     * @implements IEpAccept_\n     * @constructor\n     * @param {IEpAccept_=} [properties] Properties to set\n     */\n    function EpAccept_(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new EpAccept_ instance using the specified properties.\n     * @function create\n     * @memberof EpAccept_\n     * @static\n     * @param {IEpAccept_=} [properties] Properties to set\n     * @returns {EpAccept_} EpAccept_ instance\n     */\n    EpAccept_.create = function create(properties) {\n        return new EpAccept_(properties);\n    };\n\n    /**\n     * Encodes the specified EpAccept_ message. Does not implicitly {@link EpAccept_.verify|verify} messages.\n     * @function encode\n     * @memberof EpAccept_\n     * @static\n     * @param {IEpAccept_} message EpAccept_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpAccept_.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EpAccept_ message, length delimited. Does not implicitly {@link EpAccept_.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EpAccept_\n     * @static\n     * @param {IEpAccept_} message EpAccept_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpAccept_.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EpAccept_ message from the specified reader or buffer.\n     * @function decode\n     * @memberof EpAccept_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EpAccept_} EpAccept_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpAccept_.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EpAccept_();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EpAccept_ message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EpAccept_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EpAccept_} EpAccept_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpAccept_.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EpAccept_ message.\n     * @function verify\n     * @memberof EpAccept_\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EpAccept_.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EpAccept_ message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EpAccept_\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EpAccept_} EpAccept_\n     */\n    EpAccept_.fromObject = function fromObject(object) {\n        if (object instanceof $root.EpAccept_)\n            return object;\n        return new $root.EpAccept_();\n    };\n\n    /**\n     * Creates a plain object from an EpAccept_ message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EpAccept_\n     * @static\n     * @param {EpAccept_} message EpAccept_\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EpAccept_.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this EpAccept_ to JSON.\n     * @function toJSON\n     * @memberof EpAccept_\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EpAccept_.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EpAccept_;\n})();\n\nexport const EpDecided_ = $root.EpDecided_ = (() => {\n\n    /**\n     * Properties of an EpDecided_.\n     * @exports IEpDecided_\n     * @interface IEpDecided_\n     * @property {number|null} [value] EpDecided_ value\n     */\n\n    /**\n     * Constructs a new EpDecided_.\n     * @exports EpDecided_\n     * @classdesc Represents an EpDecided_.\n     * @implements IEpDecided_\n     * @constructor\n     * @param {IEpDecided_=} [properties] Properties to set\n     */\n    function EpDecided_(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EpDecided_ value.\n     * @member {number} value\n     * @memberof EpDecided_\n     * @instance\n     */\n    EpDecided_.prototype.value = 0;\n\n    /**\n     * Creates a new EpDecided_ instance using the specified properties.\n     * @function create\n     * @memberof EpDecided_\n     * @static\n     * @param {IEpDecided_=} [properties] Properties to set\n     * @returns {EpDecided_} EpDecided_ instance\n     */\n    EpDecided_.create = function create(properties) {\n        return new EpDecided_(properties);\n    };\n\n    /**\n     * Encodes the specified EpDecided_ message. Does not implicitly {@link EpDecided_.verify|verify} messages.\n     * @function encode\n     * @memberof EpDecided_\n     * @static\n     * @param {IEpDecided_} message EpDecided_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpDecided_.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EpDecided_ message, length delimited. Does not implicitly {@link EpDecided_.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EpDecided_\n     * @static\n     * @param {IEpDecided_} message EpDecided_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EpDecided_.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EpDecided_ message from the specified reader or buffer.\n     * @function decode\n     * @memberof EpDecided_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EpDecided_} EpDecided_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpDecided_.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EpDecided_();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.value = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EpDecided_ message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EpDecided_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EpDecided_} EpDecided_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EpDecided_.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EpDecided_ message.\n     * @function verify\n     * @memberof EpDecided_\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EpDecided_.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            if (!$util.isInteger(message.value))\n                return \"value: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EpDecided_ message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EpDecided_\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EpDecided_} EpDecided_\n     */\n    EpDecided_.fromObject = function fromObject(object) {\n        if (object instanceof $root.EpDecided_)\n            return object;\n        let message = new $root.EpDecided_();\n        if (object.value != null)\n            message.value = object.value | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an EpDecided_ message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EpDecided_\n     * @static\n     * @param {EpDecided_} message EpDecided_\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EpDecided_.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.value = 0;\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            object.value = message.value;\n        return object;\n    };\n\n    /**\n     * Converts this EpDecided_ to JSON.\n     * @function toJSON\n     * @memberof EpDecided_\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EpDecided_.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EpDecided_;\n})();\n\nexport const EcNewEpoch_ = $root.EcNewEpoch_ = (() => {\n\n    /**\n     * Properties of an EcNewEpoch_.\n     * @exports IEcNewEpoch_\n     * @interface IEcNewEpoch_\n     * @property {number|null} [timestamp] EcNewEpoch_ timestamp\n     */\n\n    /**\n     * Constructs a new EcNewEpoch_.\n     * @exports EcNewEpoch_\n     * @classdesc Represents an EcNewEpoch_.\n     * @implements IEcNewEpoch_\n     * @constructor\n     * @param {IEcNewEpoch_=} [properties] Properties to set\n     */\n    function EcNewEpoch_(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EcNewEpoch_ timestamp.\n     * @member {number} timestamp\n     * @memberof EcNewEpoch_\n     * @instance\n     */\n    EcNewEpoch_.prototype.timestamp = 0;\n\n    /**\n     * Creates a new EcNewEpoch_ instance using the specified properties.\n     * @function create\n     * @memberof EcNewEpoch_\n     * @static\n     * @param {IEcNewEpoch_=} [properties] Properties to set\n     * @returns {EcNewEpoch_} EcNewEpoch_ instance\n     */\n    EcNewEpoch_.create = function create(properties) {\n        return new EcNewEpoch_(properties);\n    };\n\n    /**\n     * Encodes the specified EcNewEpoch_ message. Does not implicitly {@link EcNewEpoch_.verify|verify} messages.\n     * @function encode\n     * @memberof EcNewEpoch_\n     * @static\n     * @param {IEcNewEpoch_} message EcNewEpoch_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EcNewEpoch_.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.timestamp != null && Object.hasOwnProperty.call(message, \"timestamp\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.timestamp);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EcNewEpoch_ message, length delimited. Does not implicitly {@link EcNewEpoch_.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EcNewEpoch_\n     * @static\n     * @param {IEcNewEpoch_} message EcNewEpoch_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EcNewEpoch_.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EcNewEpoch_ message from the specified reader or buffer.\n     * @function decode\n     * @memberof EcNewEpoch_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EcNewEpoch_} EcNewEpoch_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EcNewEpoch_.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EcNewEpoch_();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.timestamp = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EcNewEpoch_ message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EcNewEpoch_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EcNewEpoch_} EcNewEpoch_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EcNewEpoch_.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EcNewEpoch_ message.\n     * @function verify\n     * @memberof EcNewEpoch_\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EcNewEpoch_.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n            if (!$util.isInteger(message.timestamp))\n                return \"timestamp: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EcNewEpoch_ message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EcNewEpoch_\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EcNewEpoch_} EcNewEpoch_\n     */\n    EcNewEpoch_.fromObject = function fromObject(object) {\n        if (object instanceof $root.EcNewEpoch_)\n            return object;\n        let message = new $root.EcNewEpoch_();\n        if (object.timestamp != null)\n            message.timestamp = object.timestamp | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an EcNewEpoch_ message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EcNewEpoch_\n     * @static\n     * @param {EcNewEpoch_} message EcNewEpoch_\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EcNewEpoch_.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.timestamp = 0;\n        if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n            object.timestamp = message.timestamp;\n        return object;\n    };\n\n    /**\n     * Converts this EcNewEpoch_ to JSON.\n     * @function toJSON\n     * @memberof EcNewEpoch_\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EcNewEpoch_.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EcNewEpoch_;\n})();\n\nexport const EcNack_ = $root.EcNack_ = (() => {\n\n    /**\n     * Properties of an EcNack_.\n     * @exports IEcNack_\n     * @interface IEcNack_\n     */\n\n    /**\n     * Constructs a new EcNack_.\n     * @exports EcNack_\n     * @classdesc Represents an EcNack_.\n     * @implements IEcNack_\n     * @constructor\n     * @param {IEcNack_=} [properties] Properties to set\n     */\n    function EcNack_(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new EcNack_ instance using the specified properties.\n     * @function create\n     * @memberof EcNack_\n     * @static\n     * @param {IEcNack_=} [properties] Properties to set\n     * @returns {EcNack_} EcNack_ instance\n     */\n    EcNack_.create = function create(properties) {\n        return new EcNack_(properties);\n    };\n\n    /**\n     * Encodes the specified EcNack_ message. Does not implicitly {@link EcNack_.verify|verify} messages.\n     * @function encode\n     * @memberof EcNack_\n     * @static\n     * @param {IEcNack_} message EcNack_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EcNack_.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EcNack_ message, length delimited. Does not implicitly {@link EcNack_.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EcNack_\n     * @static\n     * @param {IEcNack_} message EcNack_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EcNack_.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EcNack_ message from the specified reader or buffer.\n     * @function decode\n     * @memberof EcNack_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EcNack_} EcNack_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EcNack_.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EcNack_();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EcNack_ message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EcNack_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EcNack_} EcNack_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EcNack_.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EcNack_ message.\n     * @function verify\n     * @memberof EcNack_\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EcNack_.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EcNack_ message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EcNack_\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EcNack_} EcNack_\n     */\n    EcNack_.fromObject = function fromObject(object) {\n        if (object instanceof $root.EcNack_)\n            return object;\n        return new $root.EcNack_();\n    };\n\n    /**\n     * Creates a plain object from an EcNack_ message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EcNack_\n     * @static\n     * @param {EcNack_} message EcNack_\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EcNack_.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this EcNack_ to JSON.\n     * @function toJSON\n     * @memberof EcNack_\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EcNack_.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EcNack_;\n})();\n\nexport const BebBroadcast = $root.BebBroadcast = (() => {\n\n    /**\n     * Properties of a BebBroadcast.\n     * @exports IBebBroadcast\n     * @interface IBebBroadcast\n     * @property {IMessage|null} [message] BebBroadcast message\n     */\n\n    /**\n     * Constructs a new BebBroadcast.\n     * @exports BebBroadcast\n     * @classdesc Represents a BebBroadcast.\n     * @implements IBebBroadcast\n     * @constructor\n     * @param {IBebBroadcast=} [properties] Properties to set\n     */\n    function BebBroadcast(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * BebBroadcast message.\n     * @member {IMessage|null|undefined} message\n     * @memberof BebBroadcast\n     * @instance\n     */\n    BebBroadcast.prototype.message = null;\n\n    /**\n     * Creates a new BebBroadcast instance using the specified properties.\n     * @function create\n     * @memberof BebBroadcast\n     * @static\n     * @param {IBebBroadcast=} [properties] Properties to set\n     * @returns {BebBroadcast} BebBroadcast instance\n     */\n    BebBroadcast.create = function create(properties) {\n        return new BebBroadcast(properties);\n    };\n\n    /**\n     * Encodes the specified BebBroadcast message. Does not implicitly {@link BebBroadcast.verify|verify} messages.\n     * @function encode\n     * @memberof BebBroadcast\n     * @static\n     * @param {IBebBroadcast} message BebBroadcast message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BebBroadcast.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n            $root.Message.encode(message.message, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified BebBroadcast message, length delimited. Does not implicitly {@link BebBroadcast.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof BebBroadcast\n     * @static\n     * @param {IBebBroadcast} message BebBroadcast message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BebBroadcast.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BebBroadcast message from the specified reader or buffer.\n     * @function decode\n     * @memberof BebBroadcast\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {BebBroadcast} BebBroadcast\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BebBroadcast.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.BebBroadcast();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.message = $root.Message.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a BebBroadcast message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof BebBroadcast\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {BebBroadcast} BebBroadcast\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BebBroadcast.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BebBroadcast message.\n     * @function verify\n     * @memberof BebBroadcast\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BebBroadcast.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.message != null && message.hasOwnProperty(\"message\")) {\n            let error = $root.Message.verify(message.message);\n            if (error)\n                return \"message.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a BebBroadcast message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof BebBroadcast\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {BebBroadcast} BebBroadcast\n     */\n    BebBroadcast.fromObject = function fromObject(object) {\n        if (object instanceof $root.BebBroadcast)\n            return object;\n        let message = new $root.BebBroadcast();\n        if (object.message != null) {\n            if (typeof object.message !== \"object\")\n                throw TypeError(\".BebBroadcast.message: object expected\");\n            message.message = $root.Message.fromObject(object.message);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a BebBroadcast message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof BebBroadcast\n     * @static\n     * @param {BebBroadcast} message BebBroadcast\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BebBroadcast.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.message = null;\n        if (message.message != null && message.hasOwnProperty(\"message\"))\n            object.message = $root.Message.toObject(message.message, options);\n        return object;\n    };\n\n    /**\n     * Converts this BebBroadcast to JSON.\n     * @function toJSON\n     * @memberof BebBroadcast\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BebBroadcast.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BebBroadcast;\n})();\n\nexport const BebDeliver = $root.BebDeliver = (() => {\n\n    /**\n     * Properties of a BebDeliver.\n     * @exports IBebDeliver\n     * @interface IBebDeliver\n     * @property {IMessage|null} [message] BebDeliver message\n     * @property {IProcessId|null} [sender] BebDeliver sender\n     */\n\n    /**\n     * Constructs a new BebDeliver.\n     * @exports BebDeliver\n     * @classdesc Represents a BebDeliver.\n     * @implements IBebDeliver\n     * @constructor\n     * @param {IBebDeliver=} [properties] Properties to set\n     */\n    function BebDeliver(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * BebDeliver message.\n     * @member {IMessage|null|undefined} message\n     * @memberof BebDeliver\n     * @instance\n     */\n    BebDeliver.prototype.message = null;\n\n    /**\n     * BebDeliver sender.\n     * @member {IProcessId|null|undefined} sender\n     * @memberof BebDeliver\n     * @instance\n     */\n    BebDeliver.prototype.sender = null;\n\n    /**\n     * Creates a new BebDeliver instance using the specified properties.\n     * @function create\n     * @memberof BebDeliver\n     * @static\n     * @param {IBebDeliver=} [properties] Properties to set\n     * @returns {BebDeliver} BebDeliver instance\n     */\n    BebDeliver.create = function create(properties) {\n        return new BebDeliver(properties);\n    };\n\n    /**\n     * Encodes the specified BebDeliver message. Does not implicitly {@link BebDeliver.verify|verify} messages.\n     * @function encode\n     * @memberof BebDeliver\n     * @static\n     * @param {IBebDeliver} message BebDeliver message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BebDeliver.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n            $root.Message.encode(message.message, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.sender != null && Object.hasOwnProperty.call(message, \"sender\"))\n            $root.ProcessId.encode(message.sender, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified BebDeliver message, length delimited. Does not implicitly {@link BebDeliver.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof BebDeliver\n     * @static\n     * @param {IBebDeliver} message BebDeliver message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BebDeliver.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BebDeliver message from the specified reader or buffer.\n     * @function decode\n     * @memberof BebDeliver\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {BebDeliver} BebDeliver\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BebDeliver.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.BebDeliver();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.message = $root.Message.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.sender = $root.ProcessId.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a BebDeliver message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof BebDeliver\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {BebDeliver} BebDeliver\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BebDeliver.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BebDeliver message.\n     * @function verify\n     * @memberof BebDeliver\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BebDeliver.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.message != null && message.hasOwnProperty(\"message\")) {\n            let error = $root.Message.verify(message.message);\n            if (error)\n                return \"message.\" + error;\n        }\n        if (message.sender != null && message.hasOwnProperty(\"sender\")) {\n            let error = $root.ProcessId.verify(message.sender);\n            if (error)\n                return \"sender.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a BebDeliver message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof BebDeliver\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {BebDeliver} BebDeliver\n     */\n    BebDeliver.fromObject = function fromObject(object) {\n        if (object instanceof $root.BebDeliver)\n            return object;\n        let message = new $root.BebDeliver();\n        if (object.message != null) {\n            if (typeof object.message !== \"object\")\n                throw TypeError(\".BebDeliver.message: object expected\");\n            message.message = $root.Message.fromObject(object.message);\n        }\n        if (object.sender != null) {\n            if (typeof object.sender !== \"object\")\n                throw TypeError(\".BebDeliver.sender: object expected\");\n            message.sender = $root.ProcessId.fromObject(object.sender);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a BebDeliver message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof BebDeliver\n     * @static\n     * @param {BebDeliver} message BebDeliver\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BebDeliver.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.message = null;\n            object.sender = null;\n        }\n        if (message.message != null && message.hasOwnProperty(\"message\"))\n            object.message = $root.Message.toObject(message.message, options);\n        if (message.sender != null && message.hasOwnProperty(\"sender\"))\n            object.sender = $root.ProcessId.toObject(message.sender, options);\n        return object;\n    };\n\n    /**\n     * Converts this BebDeliver to JSON.\n     * @function toJSON\n     * @memberof BebDeliver\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BebDeliver.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BebDeliver;\n})();\n\nexport const EldRecovery = $root.EldRecovery = (() => {\n\n    /**\n     * Properties of an EldRecovery.\n     * @exports IEldRecovery\n     * @interface IEldRecovery\n     */\n\n    /**\n     * Constructs a new EldRecovery.\n     * @exports EldRecovery\n     * @classdesc Represents an EldRecovery.\n     * @implements IEldRecovery\n     * @constructor\n     * @param {IEldRecovery=} [properties] Properties to set\n     */\n    function EldRecovery(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new EldRecovery instance using the specified properties.\n     * @function create\n     * @memberof EldRecovery\n     * @static\n     * @param {IEldRecovery=} [properties] Properties to set\n     * @returns {EldRecovery} EldRecovery instance\n     */\n    EldRecovery.create = function create(properties) {\n        return new EldRecovery(properties);\n    };\n\n    /**\n     * Encodes the specified EldRecovery message. Does not implicitly {@link EldRecovery.verify|verify} messages.\n     * @function encode\n     * @memberof EldRecovery\n     * @static\n     * @param {IEldRecovery} message EldRecovery message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EldRecovery.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EldRecovery message, length delimited. Does not implicitly {@link EldRecovery.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EldRecovery\n     * @static\n     * @param {IEldRecovery} message EldRecovery message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EldRecovery.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EldRecovery message from the specified reader or buffer.\n     * @function decode\n     * @memberof EldRecovery\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EldRecovery} EldRecovery\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EldRecovery.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EldRecovery();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EldRecovery message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EldRecovery\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EldRecovery} EldRecovery\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EldRecovery.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EldRecovery message.\n     * @function verify\n     * @memberof EldRecovery\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EldRecovery.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EldRecovery message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EldRecovery\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EldRecovery} EldRecovery\n     */\n    EldRecovery.fromObject = function fromObject(object) {\n        if (object instanceof $root.EldRecovery)\n            return object;\n        return new $root.EldRecovery();\n    };\n\n    /**\n     * Creates a plain object from an EldRecovery message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EldRecovery\n     * @static\n     * @param {EldRecovery} message EldRecovery\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EldRecovery.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this EldRecovery to JSON.\n     * @function toJSON\n     * @memberof EldRecovery\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EldRecovery.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EldRecovery;\n})();\n\nexport const EldTimeout = $root.EldTimeout = (() => {\n\n    /**\n     * Properties of an EldTimeout.\n     * @exports IEldTimeout\n     * @interface IEldTimeout\n     */\n\n    /**\n     * Constructs a new EldTimeout.\n     * @exports EldTimeout\n     * @classdesc Represents an EldTimeout.\n     * @implements IEldTimeout\n     * @constructor\n     * @param {IEldTimeout=} [properties] Properties to set\n     */\n    function EldTimeout(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new EldTimeout instance using the specified properties.\n     * @function create\n     * @memberof EldTimeout\n     * @static\n     * @param {IEldTimeout=} [properties] Properties to set\n     * @returns {EldTimeout} EldTimeout instance\n     */\n    EldTimeout.create = function create(properties) {\n        return new EldTimeout(properties);\n    };\n\n    /**\n     * Encodes the specified EldTimeout message. Does not implicitly {@link EldTimeout.verify|verify} messages.\n     * @function encode\n     * @memberof EldTimeout\n     * @static\n     * @param {IEldTimeout} message EldTimeout message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EldTimeout.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EldTimeout message, length delimited. Does not implicitly {@link EldTimeout.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EldTimeout\n     * @static\n     * @param {IEldTimeout} message EldTimeout message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EldTimeout.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EldTimeout message from the specified reader or buffer.\n     * @function decode\n     * @memberof EldTimeout\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EldTimeout} EldTimeout\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EldTimeout.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EldTimeout();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EldTimeout message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EldTimeout\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EldTimeout} EldTimeout\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EldTimeout.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EldTimeout message.\n     * @function verify\n     * @memberof EldTimeout\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EldTimeout.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EldTimeout message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EldTimeout\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EldTimeout} EldTimeout\n     */\n    EldTimeout.fromObject = function fromObject(object) {\n        if (object instanceof $root.EldTimeout)\n            return object;\n        return new $root.EldTimeout();\n    };\n\n    /**\n     * Creates a plain object from an EldTimeout message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EldTimeout\n     * @static\n     * @param {EldTimeout} message EldTimeout\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EldTimeout.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this EldTimeout to JSON.\n     * @function toJSON\n     * @memberof EldTimeout\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EldTimeout.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EldTimeout;\n})();\n\nexport const EldTrust = $root.EldTrust = (() => {\n\n    /**\n     * Properties of an EldTrust.\n     * @exports IEldTrust\n     * @interface IEldTrust\n     * @property {IProcessId|null} [processId] EldTrust processId\n     */\n\n    /**\n     * Constructs a new EldTrust.\n     * @exports EldTrust\n     * @classdesc Represents an EldTrust.\n     * @implements IEldTrust\n     * @constructor\n     * @param {IEldTrust=} [properties] Properties to set\n     */\n    function EldTrust(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EldTrust processId.\n     * @member {IProcessId|null|undefined} processId\n     * @memberof EldTrust\n     * @instance\n     */\n    EldTrust.prototype.processId = null;\n\n    /**\n     * Creates a new EldTrust instance using the specified properties.\n     * @function create\n     * @memberof EldTrust\n     * @static\n     * @param {IEldTrust=} [properties] Properties to set\n     * @returns {EldTrust} EldTrust instance\n     */\n    EldTrust.create = function create(properties) {\n        return new EldTrust(properties);\n    };\n\n    /**\n     * Encodes the specified EldTrust message. Does not implicitly {@link EldTrust.verify|verify} messages.\n     * @function encode\n     * @memberof EldTrust\n     * @static\n     * @param {IEldTrust} message EldTrust message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EldTrust.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.processId != null && Object.hasOwnProperty.call(message, \"processId\"))\n            $root.ProcessId.encode(message.processId, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EldTrust message, length delimited. Does not implicitly {@link EldTrust.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EldTrust\n     * @static\n     * @param {IEldTrust} message EldTrust message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EldTrust.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EldTrust message from the specified reader or buffer.\n     * @function decode\n     * @memberof EldTrust\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EldTrust} EldTrust\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EldTrust.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EldTrust();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.processId = $root.ProcessId.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EldTrust message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EldTrust\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EldTrust} EldTrust\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EldTrust.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EldTrust message.\n     * @function verify\n     * @memberof EldTrust\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EldTrust.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.processId != null && message.hasOwnProperty(\"processId\")) {\n            let error = $root.ProcessId.verify(message.processId);\n            if (error)\n                return \"processId.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates an EldTrust message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EldTrust\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EldTrust} EldTrust\n     */\n    EldTrust.fromObject = function fromObject(object) {\n        if (object instanceof $root.EldTrust)\n            return object;\n        let message = new $root.EldTrust();\n        if (object.processId != null) {\n            if (typeof object.processId !== \"object\")\n                throw TypeError(\".EldTrust.processId: object expected\");\n            message.processId = $root.ProcessId.fromObject(object.processId);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an EldTrust message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EldTrust\n     * @static\n     * @param {EldTrust} message EldTrust\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EldTrust.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.processId = null;\n        if (message.processId != null && message.hasOwnProperty(\"processId\"))\n            object.processId = $root.ProcessId.toObject(message.processId, options);\n        return object;\n    };\n\n    /**\n     * Converts this EldTrust to JSON.\n     * @function toJSON\n     * @memberof EldTrust\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EldTrust.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EldTrust;\n})();\n\nexport const EldHeartbeat_ = $root.EldHeartbeat_ = (() => {\n\n    /**\n     * Properties of an EldHeartbeat_.\n     * @exports IEldHeartbeat_\n     * @interface IEldHeartbeat_\n     * @property {number|null} [epoch] EldHeartbeat_ epoch\n     */\n\n    /**\n     * Constructs a new EldHeartbeat_.\n     * @exports EldHeartbeat_\n     * @classdesc Represents an EldHeartbeat_.\n     * @implements IEldHeartbeat_\n     * @constructor\n     * @param {IEldHeartbeat_=} [properties] Properties to set\n     */\n    function EldHeartbeat_(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EldHeartbeat_ epoch.\n     * @member {number} epoch\n     * @memberof EldHeartbeat_\n     * @instance\n     */\n    EldHeartbeat_.prototype.epoch = 0;\n\n    /**\n     * Creates a new EldHeartbeat_ instance using the specified properties.\n     * @function create\n     * @memberof EldHeartbeat_\n     * @static\n     * @param {IEldHeartbeat_=} [properties] Properties to set\n     * @returns {EldHeartbeat_} EldHeartbeat_ instance\n     */\n    EldHeartbeat_.create = function create(properties) {\n        return new EldHeartbeat_(properties);\n    };\n\n    /**\n     * Encodes the specified EldHeartbeat_ message. Does not implicitly {@link EldHeartbeat_.verify|verify} messages.\n     * @function encode\n     * @memberof EldHeartbeat_\n     * @static\n     * @param {IEldHeartbeat_} message EldHeartbeat_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EldHeartbeat_.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.epoch != null && Object.hasOwnProperty.call(message, \"epoch\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.epoch);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EldHeartbeat_ message, length delimited. Does not implicitly {@link EldHeartbeat_.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EldHeartbeat_\n     * @static\n     * @param {IEldHeartbeat_} message EldHeartbeat_ message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EldHeartbeat_.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EldHeartbeat_ message from the specified reader or buffer.\n     * @function decode\n     * @memberof EldHeartbeat_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EldHeartbeat_} EldHeartbeat_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EldHeartbeat_.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.EldHeartbeat_();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.epoch = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EldHeartbeat_ message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EldHeartbeat_\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EldHeartbeat_} EldHeartbeat_\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EldHeartbeat_.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EldHeartbeat_ message.\n     * @function verify\n     * @memberof EldHeartbeat_\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EldHeartbeat_.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.epoch != null && message.hasOwnProperty(\"epoch\"))\n            if (!$util.isInteger(message.epoch))\n                return \"epoch: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EldHeartbeat_ message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EldHeartbeat_\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EldHeartbeat_} EldHeartbeat_\n     */\n    EldHeartbeat_.fromObject = function fromObject(object) {\n        if (object instanceof $root.EldHeartbeat_)\n            return object;\n        let message = new $root.EldHeartbeat_();\n        if (object.epoch != null)\n            message.epoch = object.epoch | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an EldHeartbeat_ message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EldHeartbeat_\n     * @static\n     * @param {EldHeartbeat_} message EldHeartbeat_\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EldHeartbeat_.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.epoch = 0;\n        if (message.epoch != null && message.hasOwnProperty(\"epoch\"))\n            object.epoch = message.epoch;\n        return object;\n    };\n\n    /**\n     * Converts this EldHeartbeat_ to JSON.\n     * @function toJSON\n     * @memberof EldHeartbeat_\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EldHeartbeat_.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EldHeartbeat_;\n})();\n\nexport const PlSend = $root.PlSend = (() => {\n\n    /**\n     * Properties of a PlSend.\n     * @exports IPlSend\n     * @interface IPlSend\n     * @property {IProcessId|null} [destination] PlSend destination\n     * @property {IMessage|null} [message] PlSend message\n     */\n\n    /**\n     * Constructs a new PlSend.\n     * @exports PlSend\n     * @classdesc Represents a PlSend.\n     * @implements IPlSend\n     * @constructor\n     * @param {IPlSend=} [properties] Properties to set\n     */\n    function PlSend(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * PlSend destination.\n     * @member {IProcessId|null|undefined} destination\n     * @memberof PlSend\n     * @instance\n     */\n    PlSend.prototype.destination = null;\n\n    /**\n     * PlSend message.\n     * @member {IMessage|null|undefined} message\n     * @memberof PlSend\n     * @instance\n     */\n    PlSend.prototype.message = null;\n\n    /**\n     * Creates a new PlSend instance using the specified properties.\n     * @function create\n     * @memberof PlSend\n     * @static\n     * @param {IPlSend=} [properties] Properties to set\n     * @returns {PlSend} PlSend instance\n     */\n    PlSend.create = function create(properties) {\n        return new PlSend(properties);\n    };\n\n    /**\n     * Encodes the specified PlSend message. Does not implicitly {@link PlSend.verify|verify} messages.\n     * @function encode\n     * @memberof PlSend\n     * @static\n     * @param {IPlSend} message PlSend message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PlSend.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.destination != null && Object.hasOwnProperty.call(message, \"destination\"))\n            $root.ProcessId.encode(message.destination, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n            $root.Message.encode(message.message, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified PlSend message, length delimited. Does not implicitly {@link PlSend.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof PlSend\n     * @static\n     * @param {IPlSend} message PlSend message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PlSend.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a PlSend message from the specified reader or buffer.\n     * @function decode\n     * @memberof PlSend\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {PlSend} PlSend\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PlSend.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.PlSend();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.destination = $root.ProcessId.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.message = $root.Message.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a PlSend message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof PlSend\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {PlSend} PlSend\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PlSend.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a PlSend message.\n     * @function verify\n     * @memberof PlSend\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    PlSend.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.destination != null && message.hasOwnProperty(\"destination\")) {\n            let error = $root.ProcessId.verify(message.destination);\n            if (error)\n                return \"destination.\" + error;\n        }\n        if (message.message != null && message.hasOwnProperty(\"message\")) {\n            let error = $root.Message.verify(message.message);\n            if (error)\n                return \"message.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a PlSend message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PlSend\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {PlSend} PlSend\n     */\n    PlSend.fromObject = function fromObject(object) {\n        if (object instanceof $root.PlSend)\n            return object;\n        let message = new $root.PlSend();\n        if (object.destination != null) {\n            if (typeof object.destination !== \"object\")\n                throw TypeError(\".PlSend.destination: object expected\");\n            message.destination = $root.ProcessId.fromObject(object.destination);\n        }\n        if (object.message != null) {\n            if (typeof object.message !== \"object\")\n                throw TypeError(\".PlSend.message: object expected\");\n            message.message = $root.Message.fromObject(object.message);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a PlSend message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PlSend\n     * @static\n     * @param {PlSend} message PlSend\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PlSend.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.destination = null;\n            object.message = null;\n        }\n        if (message.destination != null && message.hasOwnProperty(\"destination\"))\n            object.destination = $root.ProcessId.toObject(message.destination, options);\n        if (message.message != null && message.hasOwnProperty(\"message\"))\n            object.message = $root.Message.toObject(message.message, options);\n        return object;\n    };\n\n    /**\n     * Converts this PlSend to JSON.\n     * @function toJSON\n     * @memberof PlSend\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PlSend.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PlSend;\n})();\n\nexport const PlDeliver = $root.PlDeliver = (() => {\n\n    /**\n     * Properties of a PlDeliver.\n     * @exports IPlDeliver\n     * @interface IPlDeliver\n     * @property {IProcessId|null} [sender] PlDeliver sender\n     * @property {IMessage|null} [message] PlDeliver message\n     */\n\n    /**\n     * Constructs a new PlDeliver.\n     * @exports PlDeliver\n     * @classdesc Represents a PlDeliver.\n     * @implements IPlDeliver\n     * @constructor\n     * @param {IPlDeliver=} [properties] Properties to set\n     */\n    function PlDeliver(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * PlDeliver sender.\n     * @member {IProcessId|null|undefined} sender\n     * @memberof PlDeliver\n     * @instance\n     */\n    PlDeliver.prototype.sender = null;\n\n    /**\n     * PlDeliver message.\n     * @member {IMessage|null|undefined} message\n     * @memberof PlDeliver\n     * @instance\n     */\n    PlDeliver.prototype.message = null;\n\n    /**\n     * Creates a new PlDeliver instance using the specified properties.\n     * @function create\n     * @memberof PlDeliver\n     * @static\n     * @param {IPlDeliver=} [properties] Properties to set\n     * @returns {PlDeliver} PlDeliver instance\n     */\n    PlDeliver.create = function create(properties) {\n        return new PlDeliver(properties);\n    };\n\n    /**\n     * Encodes the specified PlDeliver message. Does not implicitly {@link PlDeliver.verify|verify} messages.\n     * @function encode\n     * @memberof PlDeliver\n     * @static\n     * @param {IPlDeliver} message PlDeliver message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PlDeliver.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.sender != null && Object.hasOwnProperty.call(message, \"sender\"))\n            $root.ProcessId.encode(message.sender, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n            $root.Message.encode(message.message, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified PlDeliver message, length delimited. Does not implicitly {@link PlDeliver.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof PlDeliver\n     * @static\n     * @param {IPlDeliver} message PlDeliver message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PlDeliver.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a PlDeliver message from the specified reader or buffer.\n     * @function decode\n     * @memberof PlDeliver\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {PlDeliver} PlDeliver\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PlDeliver.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.PlDeliver();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.sender = $root.ProcessId.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.message = $root.Message.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a PlDeliver message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof PlDeliver\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {PlDeliver} PlDeliver\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PlDeliver.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a PlDeliver message.\n     * @function verify\n     * @memberof PlDeliver\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    PlDeliver.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.sender != null && message.hasOwnProperty(\"sender\")) {\n            let error = $root.ProcessId.verify(message.sender);\n            if (error)\n                return \"sender.\" + error;\n        }\n        if (message.message != null && message.hasOwnProperty(\"message\")) {\n            let error = $root.Message.verify(message.message);\n            if (error)\n                return \"message.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a PlDeliver message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PlDeliver\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {PlDeliver} PlDeliver\n     */\n    PlDeliver.fromObject = function fromObject(object) {\n        if (object instanceof $root.PlDeliver)\n            return object;\n        let message = new $root.PlDeliver();\n        if (object.sender != null) {\n            if (typeof object.sender !== \"object\")\n                throw TypeError(\".PlDeliver.sender: object expected\");\n            message.sender = $root.ProcessId.fromObject(object.sender);\n        }\n        if (object.message != null) {\n            if (typeof object.message !== \"object\")\n                throw TypeError(\".PlDeliver.message: object expected\");\n            message.message = $root.Message.fromObject(object.message);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a PlDeliver message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PlDeliver\n     * @static\n     * @param {PlDeliver} message PlDeliver\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PlDeliver.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.sender = null;\n            object.message = null;\n        }\n        if (message.sender != null && message.hasOwnProperty(\"sender\"))\n            object.sender = $root.ProcessId.toObject(message.sender, options);\n        if (message.message != null && message.hasOwnProperty(\"message\"))\n            object.message = $root.Message.toObject(message.message, options);\n        return object;\n    };\n\n    /**\n     * Converts this PlDeliver to JSON.\n     * @function toJSON\n     * @memberof PlDeliver\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PlDeliver.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PlDeliver;\n})();\n\nexport const NetworkMessage = $root.NetworkMessage = (() => {\n\n    /**\n     * Properties of a NetworkMessage.\n     * @exports INetworkMessage\n     * @interface INetworkMessage\n     * @property {number|null} [rendezvousPort] NetworkMessage rendezvousPort\n     * @property {IMessage|null} [message] NetworkMessage message\n     */\n\n    /**\n     * Constructs a new NetworkMessage.\n     * @exports NetworkMessage\n     * @classdesc Represents a NetworkMessage.\n     * @implements INetworkMessage\n     * @constructor\n     * @param {INetworkMessage=} [properties] Properties to set\n     */\n    function NetworkMessage(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * NetworkMessage rendezvousPort.\n     * @member {number} rendezvousPort\n     * @memberof NetworkMessage\n     * @instance\n     */\n    NetworkMessage.prototype.rendezvousPort = 0;\n\n    /**\n     * NetworkMessage message.\n     * @member {IMessage|null|undefined} message\n     * @memberof NetworkMessage\n     * @instance\n     */\n    NetworkMessage.prototype.message = null;\n\n    /**\n     * Creates a new NetworkMessage instance using the specified properties.\n     * @function create\n     * @memberof NetworkMessage\n     * @static\n     * @param {INetworkMessage=} [properties] Properties to set\n     * @returns {NetworkMessage} NetworkMessage instance\n     */\n    NetworkMessage.create = function create(properties) {\n        return new NetworkMessage(properties);\n    };\n\n    /**\n     * Encodes the specified NetworkMessage message. Does not implicitly {@link NetworkMessage.verify|verify} messages.\n     * @function encode\n     * @memberof NetworkMessage\n     * @static\n     * @param {INetworkMessage} message NetworkMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    NetworkMessage.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.rendezvousPort != null && Object.hasOwnProperty.call(message, \"rendezvousPort\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.rendezvousPort);\n        if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n            $root.Message.encode(message.message, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified NetworkMessage message, length delimited. Does not implicitly {@link NetworkMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof NetworkMessage\n     * @static\n     * @param {INetworkMessage} message NetworkMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    NetworkMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a NetworkMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof NetworkMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {NetworkMessage} NetworkMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    NetworkMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NetworkMessage();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.rendezvousPort = reader.int32();\n                break;\n            case 2:\n                message.message = $root.Message.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a NetworkMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof NetworkMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {NetworkMessage} NetworkMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    NetworkMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a NetworkMessage message.\n     * @function verify\n     * @memberof NetworkMessage\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    NetworkMessage.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.rendezvousPort != null && message.hasOwnProperty(\"rendezvousPort\"))\n            if (!$util.isInteger(message.rendezvousPort))\n                return \"rendezvousPort: integer expected\";\n        if (message.message != null && message.hasOwnProperty(\"message\")) {\n            let error = $root.Message.verify(message.message);\n            if (error)\n                return \"message.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a NetworkMessage message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof NetworkMessage\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {NetworkMessage} NetworkMessage\n     */\n    NetworkMessage.fromObject = function fromObject(object) {\n        if (object instanceof $root.NetworkMessage)\n            return object;\n        let message = new $root.NetworkMessage();\n        if (object.rendezvousPort != null)\n            message.rendezvousPort = object.rendezvousPort | 0;\n        if (object.message != null) {\n            if (typeof object.message !== \"object\")\n                throw TypeError(\".NetworkMessage.message: object expected\");\n            message.message = $root.Message.fromObject(object.message);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a NetworkMessage message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof NetworkMessage\n     * @static\n     * @param {NetworkMessage} message NetworkMessage\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    NetworkMessage.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.rendezvousPort = 0;\n            object.message = null;\n        }\n        if (message.rendezvousPort != null && message.hasOwnProperty(\"rendezvousPort\"))\n            object.rendezvousPort = message.rendezvousPort;\n        if (message.message != null && message.hasOwnProperty(\"message\"))\n            object.message = $root.Message.toObject(message.message, options);\n        return object;\n    };\n\n    /**\n     * Converts this NetworkMessage to JSON.\n     * @function toJSON\n     * @memberof NetworkMessage\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    NetworkMessage.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return NetworkMessage;\n})();\n\nexport const AppRegistration = $root.AppRegistration = (() => {\n\n    /**\n     * Properties of an AppRegistration.\n     * @exports IAppRegistration\n     * @interface IAppRegistration\n     * @property {string|null} [owner] AppRegistration owner\n     * @property {number|null} [index] AppRegistration index\n     * @property {number|null} [port] AppRegistration port\n     */\n\n    /**\n     * Constructs a new AppRegistration.\n     * @exports AppRegistration\n     * @classdesc Represents an AppRegistration.\n     * @implements IAppRegistration\n     * @constructor\n     * @param {IAppRegistration=} [properties] Properties to set\n     */\n    function AppRegistration(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * AppRegistration owner.\n     * @member {string} owner\n     * @memberof AppRegistration\n     * @instance\n     */\n    AppRegistration.prototype.owner = \"\";\n\n    /**\n     * AppRegistration index.\n     * @member {number} index\n     * @memberof AppRegistration\n     * @instance\n     */\n    AppRegistration.prototype.index = 0;\n\n    /**\n     * AppRegistration port.\n     * @member {number} port\n     * @memberof AppRegistration\n     * @instance\n     */\n    AppRegistration.prototype.port = 0;\n\n    /**\n     * Creates a new AppRegistration instance using the specified properties.\n     * @function create\n     * @memberof AppRegistration\n     * @static\n     * @param {IAppRegistration=} [properties] Properties to set\n     * @returns {AppRegistration} AppRegistration instance\n     */\n    AppRegistration.create = function create(properties) {\n        return new AppRegistration(properties);\n    };\n\n    /**\n     * Encodes the specified AppRegistration message. Does not implicitly {@link AppRegistration.verify|verify} messages.\n     * @function encode\n     * @memberof AppRegistration\n     * @static\n     * @param {IAppRegistration} message AppRegistration message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AppRegistration.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.owner != null && Object.hasOwnProperty.call(message, \"owner\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.owner);\n        if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.index);\n        if (message.port != null && Object.hasOwnProperty.call(message, \"port\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.port);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified AppRegistration message, length delimited. Does not implicitly {@link AppRegistration.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof AppRegistration\n     * @static\n     * @param {IAppRegistration} message AppRegistration message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AppRegistration.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an AppRegistration message from the specified reader or buffer.\n     * @function decode\n     * @memberof AppRegistration\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {AppRegistration} AppRegistration\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AppRegistration.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.AppRegistration();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.owner = reader.string();\n                break;\n            case 2:\n                message.index = reader.int32();\n                break;\n            case 3:\n                message.port = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an AppRegistration message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof AppRegistration\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {AppRegistration} AppRegistration\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AppRegistration.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an AppRegistration message.\n     * @function verify\n     * @memberof AppRegistration\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    AppRegistration.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.owner != null && message.hasOwnProperty(\"owner\"))\n            if (!$util.isString(message.owner))\n                return \"owner: string expected\";\n        if (message.index != null && message.hasOwnProperty(\"index\"))\n            if (!$util.isInteger(message.index))\n                return \"index: integer expected\";\n        if (message.port != null && message.hasOwnProperty(\"port\"))\n            if (!$util.isInteger(message.port))\n                return \"port: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an AppRegistration message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof AppRegistration\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {AppRegistration} AppRegistration\n     */\n    AppRegistration.fromObject = function fromObject(object) {\n        if (object instanceof $root.AppRegistration)\n            return object;\n        let message = new $root.AppRegistration();\n        if (object.owner != null)\n            message.owner = String(object.owner);\n        if (object.index != null)\n            message.index = object.index | 0;\n        if (object.port != null)\n            message.port = object.port | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an AppRegistration message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof AppRegistration\n     * @static\n     * @param {AppRegistration} message AppRegistration\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    AppRegistration.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.owner = \"\";\n            object.index = 0;\n            object.port = 0;\n        }\n        if (message.owner != null && message.hasOwnProperty(\"owner\"))\n            object.owner = message.owner;\n        if (message.index != null && message.hasOwnProperty(\"index\"))\n            object.index = message.index;\n        if (message.port != null && message.hasOwnProperty(\"port\"))\n            object.port = message.port;\n        return object;\n    };\n\n    /**\n     * Converts this AppRegistration to JSON.\n     * @function toJSON\n     * @memberof AppRegistration\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    AppRegistration.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return AppRegistration;\n})();\n\nexport const AppPropose = $root.AppPropose = (() => {\n\n    /**\n     * Properties of an AppPropose.\n     * @exports IAppPropose\n     * @interface IAppPropose\n     * @property {number|null} [value] AppPropose value\n     * @property {string|null} [systemId] AppPropose systemId\n     * @property {Array.<IProcessId>|null} [processes] AppPropose processes\n     */\n\n    /**\n     * Constructs a new AppPropose.\n     * @exports AppPropose\n     * @classdesc Represents an AppPropose.\n     * @implements IAppPropose\n     * @constructor\n     * @param {IAppPropose=} [properties] Properties to set\n     */\n    function AppPropose(properties) {\n        this.processes = [];\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * AppPropose value.\n     * @member {number} value\n     * @memberof AppPropose\n     * @instance\n     */\n    AppPropose.prototype.value = 0;\n\n    /**\n     * AppPropose systemId.\n     * @member {string} systemId\n     * @memberof AppPropose\n     * @instance\n     */\n    AppPropose.prototype.systemId = \"\";\n\n    /**\n     * AppPropose processes.\n     * @member {Array.<IProcessId>} processes\n     * @memberof AppPropose\n     * @instance\n     */\n    AppPropose.prototype.processes = $util.emptyArray;\n\n    /**\n     * Creates a new AppPropose instance using the specified properties.\n     * @function create\n     * @memberof AppPropose\n     * @static\n     * @param {IAppPropose=} [properties] Properties to set\n     * @returns {AppPropose} AppPropose instance\n     */\n    AppPropose.create = function create(properties) {\n        return new AppPropose(properties);\n    };\n\n    /**\n     * Encodes the specified AppPropose message. Does not implicitly {@link AppPropose.verify|verify} messages.\n     * @function encode\n     * @memberof AppPropose\n     * @static\n     * @param {IAppPropose} message AppPropose message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AppPropose.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);\n        if (message.systemId != null && Object.hasOwnProperty.call(message, \"systemId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.systemId);\n        if (message.processes != null && message.processes.length)\n            for (let i = 0; i < message.processes.length; ++i)\n                $root.ProcessId.encode(message.processes[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified AppPropose message, length delimited. Does not implicitly {@link AppPropose.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof AppPropose\n     * @static\n     * @param {IAppPropose} message AppPropose message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AppPropose.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an AppPropose message from the specified reader or buffer.\n     * @function decode\n     * @memberof AppPropose\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {AppPropose} AppPropose\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AppPropose.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.AppPropose();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.value = reader.int32();\n                break;\n            case 2:\n                message.systemId = reader.string();\n                break;\n            case 3:\n                if (!(message.processes && message.processes.length))\n                    message.processes = [];\n                message.processes.push($root.ProcessId.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an AppPropose message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof AppPropose\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {AppPropose} AppPropose\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AppPropose.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an AppPropose message.\n     * @function verify\n     * @memberof AppPropose\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    AppPropose.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            if (!$util.isInteger(message.value))\n                return \"value: integer expected\";\n        if (message.systemId != null && message.hasOwnProperty(\"systemId\"))\n            if (!$util.isString(message.systemId))\n                return \"systemId: string expected\";\n        if (message.processes != null && message.hasOwnProperty(\"processes\")) {\n            if (!Array.isArray(message.processes))\n                return \"processes: array expected\";\n            for (let i = 0; i < message.processes.length; ++i) {\n                let error = $root.ProcessId.verify(message.processes[i]);\n                if (error)\n                    return \"processes.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates an AppPropose message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof AppPropose\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {AppPropose} AppPropose\n     */\n    AppPropose.fromObject = function fromObject(object) {\n        if (object instanceof $root.AppPropose)\n            return object;\n        let message = new $root.AppPropose();\n        if (object.value != null)\n            message.value = object.value | 0;\n        if (object.systemId != null)\n            message.systemId = String(object.systemId);\n        if (object.processes) {\n            if (!Array.isArray(object.processes))\n                throw TypeError(\".AppPropose.processes: array expected\");\n            message.processes = [];\n            for (let i = 0; i < object.processes.length; ++i) {\n                if (typeof object.processes[i] !== \"object\")\n                    throw TypeError(\".AppPropose.processes: object expected\");\n                message.processes[i] = $root.ProcessId.fromObject(object.processes[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an AppPropose message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof AppPropose\n     * @static\n     * @param {AppPropose} message AppPropose\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    AppPropose.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.arrays || options.defaults)\n            object.processes = [];\n        if (options.defaults) {\n            object.value = 0;\n            object.systemId = \"\";\n        }\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            object.value = message.value;\n        if (message.systemId != null && message.hasOwnProperty(\"systemId\"))\n            object.systemId = message.systemId;\n        if (message.processes && message.processes.length) {\n            object.processes = [];\n            for (let j = 0; j < message.processes.length; ++j)\n                object.processes[j] = $root.ProcessId.toObject(message.processes[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this AppPropose to JSON.\n     * @function toJSON\n     * @memberof AppPropose\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    AppPropose.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return AppPropose;\n})();\n\nexport const AppDecide = $root.AppDecide = (() => {\n\n    /**\n     * Properties of an AppDecide.\n     * @exports IAppDecide\n     * @interface IAppDecide\n     * @property {number|null} [value] AppDecide value\n     */\n\n    /**\n     * Constructs a new AppDecide.\n     * @exports AppDecide\n     * @classdesc Represents an AppDecide.\n     * @implements IAppDecide\n     * @constructor\n     * @param {IAppDecide=} [properties] Properties to set\n     */\n    function AppDecide(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * AppDecide value.\n     * @member {number} value\n     * @memberof AppDecide\n     * @instance\n     */\n    AppDecide.prototype.value = 0;\n\n    /**\n     * Creates a new AppDecide instance using the specified properties.\n     * @function create\n     * @memberof AppDecide\n     * @static\n     * @param {IAppDecide=} [properties] Properties to set\n     * @returns {AppDecide} AppDecide instance\n     */\n    AppDecide.create = function create(properties) {\n        return new AppDecide(properties);\n    };\n\n    /**\n     * Encodes the specified AppDecide message. Does not implicitly {@link AppDecide.verify|verify} messages.\n     * @function encode\n     * @memberof AppDecide\n     * @static\n     * @param {IAppDecide} message AppDecide message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AppDecide.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified AppDecide message, length delimited. Does not implicitly {@link AppDecide.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof AppDecide\n     * @static\n     * @param {IAppDecide} message AppDecide message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AppDecide.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an AppDecide message from the specified reader or buffer.\n     * @function decode\n     * @memberof AppDecide\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {AppDecide} AppDecide\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AppDecide.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.AppDecide();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.value = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an AppDecide message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof AppDecide\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {AppDecide} AppDecide\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AppDecide.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an AppDecide message.\n     * @function verify\n     * @memberof AppDecide\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    AppDecide.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            if (!$util.isInteger(message.value))\n                return \"value: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an AppDecide message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof AppDecide\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {AppDecide} AppDecide\n     */\n    AppDecide.fromObject = function fromObject(object) {\n        if (object instanceof $root.AppDecide)\n            return object;\n        let message = new $root.AppDecide();\n        if (object.value != null)\n            message.value = object.value | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an AppDecide message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof AppDecide\n     * @static\n     * @param {AppDecide} message AppDecide\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    AppDecide.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.value = 0;\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            object.value = message.value;\n        return object;\n    };\n\n    /**\n     * Converts this AppDecide to JSON.\n     * @function toJSON\n     * @memberof AppDecide\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    AppDecide.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return AppDecide;\n})();\n\nexport const Message = $root.Message = (() => {\n\n    /**\n     * Properties of a Message.\n     * @exports IMessage\n     * @interface IMessage\n     * @property {Message.Type|null} [type] Message type\n     * @property {string|null} [messageUuid] Message messageUuid\n     * @property {string|null} [abstractionId] Message abstractionId\n     * @property {string|null} [systemId] Message systemId\n     * @property {IAppRegistration|null} [appRegistration] Message appRegistration\n     * @property {IAppPropose|null} [appPropose] Message appPropose\n     * @property {IAppDecide|null} [appDecide] Message appDecide\n     * @property {IBebBroadcast|null} [bebBroadcast] Message bebBroadcast\n     * @property {IBebDeliver|null} [bebDeliver] Message bebDeliver\n     * @property {IEcNack_|null} [ecNack_] Message ecNack_\n     * @property {IEcNewEpoch_|null} [ecNewEpoch_] Message ecNewEpoch_\n     * @property {IEcStartEpoch|null} [ecStartEpoch] Message ecStartEpoch\n     * @property {IEldHeartbeat_|null} [eldHeartbeat_] Message eldHeartbeat_\n     * @property {IEldRecovery|null} [eldRecovery] Message eldRecovery\n     * @property {IEldTimeout|null} [eldTimeout] Message eldTimeout\n     * @property {IEldTrust|null} [eldTrust] Message eldTrust\n     * @property {IEpAbort|null} [epAbort] Message epAbort\n     * @property {IEpAborted|null} [epAborted] Message epAborted\n     * @property {IEpAccept_|null} [epAccept_] Message epAccept_\n     * @property {IEpDecide|null} [epDecide] Message epDecide\n     * @property {IEpDecided_|null} [epDecided_] Message epDecided_\n     * @property {IEpInit|null} [epInit] Message epInit\n     * @property {IEpPropose|null} [epPropose] Message epPropose\n     * @property {IEpRead_|null} [epRead_] Message epRead_\n     * @property {IEpState_|null} [epState_] Message epState_\n     * @property {IEpWrite_|null} [epWrite_] Message epWrite_\n     * @property {IPlDeliver|null} [plDeliver] Message plDeliver\n     * @property {IPlSend|null} [plSend] Message plSend\n     * @property {IUcDecide|null} [ucDecide] Message ucDecide\n     * @property {IUcPropose|null} [ucPropose] Message ucPropose\n     */\n\n    /**\n     * Constructs a new Message.\n     * @exports Message\n     * @classdesc Represents a Message.\n     * @implements IMessage\n     * @constructor\n     * @param {IMessage=} [properties] Properties to set\n     */\n    function Message(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Message type.\n     * @member {Message.Type} type\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.type = 0;\n\n    /**\n     * Message messageUuid.\n     * @member {string} messageUuid\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.messageUuid = \"\";\n\n    /**\n     * Message abstractionId.\n     * @member {string} abstractionId\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.abstractionId = \"\";\n\n    /**\n     * Message systemId.\n     * @member {string} systemId\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.systemId = \"\";\n\n    /**\n     * Message appRegistration.\n     * @member {IAppRegistration|null|undefined} appRegistration\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.appRegistration = null;\n\n    /**\n     * Message appPropose.\n     * @member {IAppPropose|null|undefined} appPropose\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.appPropose = null;\n\n    /**\n     * Message appDecide.\n     * @member {IAppDecide|null|undefined} appDecide\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.appDecide = null;\n\n    /**\n     * Message bebBroadcast.\n     * @member {IBebBroadcast|null|undefined} bebBroadcast\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.bebBroadcast = null;\n\n    /**\n     * Message bebDeliver.\n     * @member {IBebDeliver|null|undefined} bebDeliver\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.bebDeliver = null;\n\n    /**\n     * Message ecNack_.\n     * @member {IEcNack_|null|undefined} ecNack_\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.ecNack_ = null;\n\n    /**\n     * Message ecNewEpoch_.\n     * @member {IEcNewEpoch_|null|undefined} ecNewEpoch_\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.ecNewEpoch_ = null;\n\n    /**\n     * Message ecStartEpoch.\n     * @member {IEcStartEpoch|null|undefined} ecStartEpoch\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.ecStartEpoch = null;\n\n    /**\n     * Message eldHeartbeat_.\n     * @member {IEldHeartbeat_|null|undefined} eldHeartbeat_\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.eldHeartbeat_ = null;\n\n    /**\n     * Message eldRecovery.\n     * @member {IEldRecovery|null|undefined} eldRecovery\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.eldRecovery = null;\n\n    /**\n     * Message eldTimeout.\n     * @member {IEldTimeout|null|undefined} eldTimeout\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.eldTimeout = null;\n\n    /**\n     * Message eldTrust.\n     * @member {IEldTrust|null|undefined} eldTrust\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.eldTrust = null;\n\n    /**\n     * Message epAbort.\n     * @member {IEpAbort|null|undefined} epAbort\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.epAbort = null;\n\n    /**\n     * Message epAborted.\n     * @member {IEpAborted|null|undefined} epAborted\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.epAborted = null;\n\n    /**\n     * Message epAccept_.\n     * @member {IEpAccept_|null|undefined} epAccept_\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.epAccept_ = null;\n\n    /**\n     * Message epDecide.\n     * @member {IEpDecide|null|undefined} epDecide\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.epDecide = null;\n\n    /**\n     * Message epDecided_.\n     * @member {IEpDecided_|null|undefined} epDecided_\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.epDecided_ = null;\n\n    /**\n     * Message epInit.\n     * @member {IEpInit|null|undefined} epInit\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.epInit = null;\n\n    /**\n     * Message epPropose.\n     * @member {IEpPropose|null|undefined} epPropose\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.epPropose = null;\n\n    /**\n     * Message epRead_.\n     * @member {IEpRead_|null|undefined} epRead_\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.epRead_ = null;\n\n    /**\n     * Message epState_.\n     * @member {IEpState_|null|undefined} epState_\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.epState_ = null;\n\n    /**\n     * Message epWrite_.\n     * @member {IEpWrite_|null|undefined} epWrite_\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.epWrite_ = null;\n\n    /**\n     * Message plDeliver.\n     * @member {IPlDeliver|null|undefined} plDeliver\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.plDeliver = null;\n\n    /**\n     * Message plSend.\n     * @member {IPlSend|null|undefined} plSend\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.plSend = null;\n\n    /**\n     * Message ucDecide.\n     * @member {IUcDecide|null|undefined} ucDecide\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.ucDecide = null;\n\n    /**\n     * Message ucPropose.\n     * @member {IUcPropose|null|undefined} ucPropose\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.ucPropose = null;\n\n    /**\n     * Creates a new Message instance using the specified properties.\n     * @function create\n     * @memberof Message\n     * @static\n     * @param {IMessage=} [properties] Properties to set\n     * @returns {Message} Message instance\n     */\n    Message.create = function create(properties) {\n        return new Message(properties);\n    };\n\n    /**\n     * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.\n     * @function encode\n     * @memberof Message\n     * @static\n     * @param {IMessage} message Message message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Message.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);\n        if (message.messageUuid != null && Object.hasOwnProperty.call(message, \"messageUuid\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.messageUuid);\n        if (message.abstractionId != null && Object.hasOwnProperty.call(message, \"abstractionId\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.abstractionId);\n        if (message.systemId != null && Object.hasOwnProperty.call(message, \"systemId\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).string(message.systemId);\n        if (message.appRegistration != null && Object.hasOwnProperty.call(message, \"appRegistration\"))\n            $root.AppRegistration.encode(message.appRegistration, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n        if (message.appPropose != null && Object.hasOwnProperty.call(message, \"appPropose\"))\n            $root.AppPropose.encode(message.appPropose, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.appDecide != null && Object.hasOwnProperty.call(message, \"appDecide\"))\n            $root.AppDecide.encode(message.appDecide, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.bebBroadcast != null && Object.hasOwnProperty.call(message, \"bebBroadcast\"))\n            $root.BebBroadcast.encode(message.bebBroadcast, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n        if (message.bebDeliver != null && Object.hasOwnProperty.call(message, \"bebDeliver\"))\n            $root.BebDeliver.encode(message.bebDeliver, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n        if (message.ecNack_ != null && Object.hasOwnProperty.call(message, \"ecNack_\"))\n            $root.EcNack_.encode(message.ecNack_, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n        if (message.ecNewEpoch_ != null && Object.hasOwnProperty.call(message, \"ecNewEpoch_\"))\n            $root.EcNewEpoch_.encode(message.ecNewEpoch_, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n        if (message.ecStartEpoch != null && Object.hasOwnProperty.call(message, \"ecStartEpoch\"))\n            $root.EcStartEpoch.encode(message.ecStartEpoch, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n        if (message.eldHeartbeat_ != null && Object.hasOwnProperty.call(message, \"eldHeartbeat_\"))\n            $root.EldHeartbeat_.encode(message.eldHeartbeat_, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n        if (message.eldRecovery != null && Object.hasOwnProperty.call(message, \"eldRecovery\"))\n            $root.EldRecovery.encode(message.eldRecovery, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();\n        if (message.eldTimeout != null && Object.hasOwnProperty.call(message, \"eldTimeout\"))\n            $root.EldTimeout.encode(message.eldTimeout, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n        if (message.eldTrust != null && Object.hasOwnProperty.call(message, \"eldTrust\"))\n            $root.EldTrust.encode(message.eldTrust, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n        if (message.epAbort != null && Object.hasOwnProperty.call(message, \"epAbort\"))\n            $root.EpAbort.encode(message.epAbort, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();\n        if (message.epAborted != null && Object.hasOwnProperty.call(message, \"epAborted\"))\n            $root.EpAborted.encode(message.epAborted, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n        if (message.epAccept_ != null && Object.hasOwnProperty.call(message, \"epAccept_\"))\n            $root.EpAccept_.encode(message.epAccept_, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();\n        if (message.epDecide != null && Object.hasOwnProperty.call(message, \"epDecide\"))\n            $root.EpDecide.encode(message.epDecide, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n        if (message.epDecided_ != null && Object.hasOwnProperty.call(message, \"epDecided_\"))\n            $root.EpDecided_.encode(message.epDecided_, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n        if (message.epInit != null && Object.hasOwnProperty.call(message, \"epInit\"))\n            $root.EpInit.encode(message.epInit, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();\n        if (message.epPropose != null && Object.hasOwnProperty.call(message, \"epPropose\"))\n            $root.EpPropose.encode(message.epPropose, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\n        if (message.epRead_ != null && Object.hasOwnProperty.call(message, \"epRead_\"))\n            $root.EpRead_.encode(message.epRead_, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();\n        if (message.epState_ != null && Object.hasOwnProperty.call(message, \"epState_\"))\n            $root.EpState_.encode(message.epState_, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();\n        if (message.epWrite_ != null && Object.hasOwnProperty.call(message, \"epWrite_\"))\n            $root.EpWrite_.encode(message.epWrite_, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();\n        if (message.plDeliver != null && Object.hasOwnProperty.call(message, \"plDeliver\"))\n            $root.PlDeliver.encode(message.plDeliver, writer.uint32(/* id 29, wireType 2 =*/234).fork()).ldelim();\n        if (message.plSend != null && Object.hasOwnProperty.call(message, \"plSend\"))\n            $root.PlSend.encode(message.plSend, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();\n        if (message.ucDecide != null && Object.hasOwnProperty.call(message, \"ucDecide\"))\n            $root.UcDecide.encode(message.ucDecide, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();\n        if (message.ucPropose != null && Object.hasOwnProperty.call(message, \"ucPropose\"))\n            $root.UcPropose.encode(message.ucPropose, writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Message message, length delimited. Does not implicitly {@link Message.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Message\n     * @static\n     * @param {IMessage} message Message message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Message.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Message message from the specified reader or buffer.\n     * @function decode\n     * @memberof Message\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Message} Message\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Message.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Message();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.type = reader.int32();\n                break;\n            case 2:\n                message.messageUuid = reader.string();\n                break;\n            case 3:\n                message.abstractionId = reader.string();\n                break;\n            case 4:\n                message.systemId = reader.string();\n                break;\n            case 5:\n                message.appRegistration = $root.AppRegistration.decode(reader, reader.uint32());\n                break;\n            case 6:\n                message.appPropose = $root.AppPropose.decode(reader, reader.uint32());\n                break;\n            case 7:\n                message.appDecide = $root.AppDecide.decode(reader, reader.uint32());\n                break;\n            case 10:\n                message.bebBroadcast = $root.BebBroadcast.decode(reader, reader.uint32());\n                break;\n            case 11:\n                message.bebDeliver = $root.BebDeliver.decode(reader, reader.uint32());\n                break;\n            case 12:\n                message.ecNack_ = $root.EcNack_.decode(reader, reader.uint32());\n                break;\n            case 13:\n                message.ecNewEpoch_ = $root.EcNewEpoch_.decode(reader, reader.uint32());\n                break;\n            case 14:\n                message.ecStartEpoch = $root.EcStartEpoch.decode(reader, reader.uint32());\n                break;\n            case 15:\n                message.eldHeartbeat_ = $root.EldHeartbeat_.decode(reader, reader.uint32());\n                break;\n            case 16:\n                message.eldRecovery = $root.EldRecovery.decode(reader, reader.uint32());\n                break;\n            case 17:\n                message.eldTimeout = $root.EldTimeout.decode(reader, reader.uint32());\n                break;\n            case 18:\n                message.eldTrust = $root.EldTrust.decode(reader, reader.uint32());\n                break;\n            case 19:\n                message.epAbort = $root.EpAbort.decode(reader, reader.uint32());\n                break;\n            case 20:\n                message.epAborted = $root.EpAborted.decode(reader, reader.uint32());\n                break;\n            case 21:\n                message.epAccept_ = $root.EpAccept_.decode(reader, reader.uint32());\n                break;\n            case 22:\n                message.epDecide = $root.EpDecide.decode(reader, reader.uint32());\n                break;\n            case 23:\n                message.epDecided_ = $root.EpDecided_.decode(reader, reader.uint32());\n                break;\n            case 24:\n                message.epInit = $root.EpInit.decode(reader, reader.uint32());\n                break;\n            case 25:\n                message.epPropose = $root.EpPropose.decode(reader, reader.uint32());\n                break;\n            case 26:\n                message.epRead_ = $root.EpRead_.decode(reader, reader.uint32());\n                break;\n            case 27:\n                message.epState_ = $root.EpState_.decode(reader, reader.uint32());\n                break;\n            case 28:\n                message.epWrite_ = $root.EpWrite_.decode(reader, reader.uint32());\n                break;\n            case 29:\n                message.plDeliver = $root.PlDeliver.decode(reader, reader.uint32());\n                break;\n            case 30:\n                message.plSend = $root.PlSend.decode(reader, reader.uint32());\n                break;\n            case 31:\n                message.ucDecide = $root.UcDecide.decode(reader, reader.uint32());\n                break;\n            case 32:\n                message.ucPropose = $root.UcPropose.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Message message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Message\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Message} Message\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Message.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Message message.\n     * @function verify\n     * @memberof Message\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Message.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            switch (message.type) {\n            default:\n                return \"type: enum value expected\";\n            case 0:\n            case 5:\n            case 6:\n            case 7:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n            case 16:\n            case 17:\n            case 18:\n            case 19:\n            case 20:\n            case 21:\n            case 22:\n            case 23:\n            case 24:\n            case 25:\n            case 26:\n            case 27:\n            case 28:\n            case 29:\n            case 30:\n            case 31:\n            case 32:\n                break;\n            }\n        if (message.messageUuid != null && message.hasOwnProperty(\"messageUuid\"))\n            if (!$util.isString(message.messageUuid))\n                return \"messageUuid: string expected\";\n        if (message.abstractionId != null && message.hasOwnProperty(\"abstractionId\"))\n            if (!$util.isString(message.abstractionId))\n                return \"abstractionId: string expected\";\n        if (message.systemId != null && message.hasOwnProperty(\"systemId\"))\n            if (!$util.isString(message.systemId))\n                return \"systemId: string expected\";\n        if (message.appRegistration != null && message.hasOwnProperty(\"appRegistration\")) {\n            let error = $root.AppRegistration.verify(message.appRegistration);\n            if (error)\n                return \"appRegistration.\" + error;\n        }\n        if (message.appPropose != null && message.hasOwnProperty(\"appPropose\")) {\n            let error = $root.AppPropose.verify(message.appPropose);\n            if (error)\n                return \"appPropose.\" + error;\n        }\n        if (message.appDecide != null && message.hasOwnProperty(\"appDecide\")) {\n            let error = $root.AppDecide.verify(message.appDecide);\n            if (error)\n                return \"appDecide.\" + error;\n        }\n        if (message.bebBroadcast != null && message.hasOwnProperty(\"bebBroadcast\")) {\n            let error = $root.BebBroadcast.verify(message.bebBroadcast);\n            if (error)\n                return \"bebBroadcast.\" + error;\n        }\n        if (message.bebDeliver != null && message.hasOwnProperty(\"bebDeliver\")) {\n            let error = $root.BebDeliver.verify(message.bebDeliver);\n            if (error)\n                return \"bebDeliver.\" + error;\n        }\n        if (message.ecNack_ != null && message.hasOwnProperty(\"ecNack_\")) {\n            let error = $root.EcNack_.verify(message.ecNack_);\n            if (error)\n                return \"ecNack_.\" + error;\n        }\n        if (message.ecNewEpoch_ != null && message.hasOwnProperty(\"ecNewEpoch_\")) {\n            let error = $root.EcNewEpoch_.verify(message.ecNewEpoch_);\n            if (error)\n                return \"ecNewEpoch_.\" + error;\n        }\n        if (message.ecStartEpoch != null && message.hasOwnProperty(\"ecStartEpoch\")) {\n            let error = $root.EcStartEpoch.verify(message.ecStartEpoch);\n            if (error)\n                return \"ecStartEpoch.\" + error;\n        }\n        if (message.eldHeartbeat_ != null && message.hasOwnProperty(\"eldHeartbeat_\")) {\n            let error = $root.EldHeartbeat_.verify(message.eldHeartbeat_);\n            if (error)\n                return \"eldHeartbeat_.\" + error;\n        }\n        if (message.eldRecovery != null && message.hasOwnProperty(\"eldRecovery\")) {\n            let error = $root.EldRecovery.verify(message.eldRecovery);\n            if (error)\n                return \"eldRecovery.\" + error;\n        }\n        if (message.eldTimeout != null && message.hasOwnProperty(\"eldTimeout\")) {\n            let error = $root.EldTimeout.verify(message.eldTimeout);\n            if (error)\n                return \"eldTimeout.\" + error;\n        }\n        if (message.eldTrust != null && message.hasOwnProperty(\"eldTrust\")) {\n            let error = $root.EldTrust.verify(message.eldTrust);\n            if (error)\n                return \"eldTrust.\" + error;\n        }\n        if (message.epAbort != null && message.hasOwnProperty(\"epAbort\")) {\n            let error = $root.EpAbort.verify(message.epAbort);\n            if (error)\n                return \"epAbort.\" + error;\n        }\n        if (message.epAborted != null && message.hasOwnProperty(\"epAborted\")) {\n            let error = $root.EpAborted.verify(message.epAborted);\n            if (error)\n                return \"epAborted.\" + error;\n        }\n        if (message.epAccept_ != null && message.hasOwnProperty(\"epAccept_\")) {\n            let error = $root.EpAccept_.verify(message.epAccept_);\n            if (error)\n                return \"epAccept_.\" + error;\n        }\n        if (message.epDecide != null && message.hasOwnProperty(\"epDecide\")) {\n            let error = $root.EpDecide.verify(message.epDecide);\n            if (error)\n                return \"epDecide.\" + error;\n        }\n        if (message.epDecided_ != null && message.hasOwnProperty(\"epDecided_\")) {\n            let error = $root.EpDecided_.verify(message.epDecided_);\n            if (error)\n                return \"epDecided_.\" + error;\n        }\n        if (message.epInit != null && message.hasOwnProperty(\"epInit\")) {\n            let error = $root.EpInit.verify(message.epInit);\n            if (error)\n                return \"epInit.\" + error;\n        }\n        if (message.epPropose != null && message.hasOwnProperty(\"epPropose\")) {\n            let error = $root.EpPropose.verify(message.epPropose);\n            if (error)\n                return \"epPropose.\" + error;\n        }\n        if (message.epRead_ != null && message.hasOwnProperty(\"epRead_\")) {\n            let error = $root.EpRead_.verify(message.epRead_);\n            if (error)\n                return \"epRead_.\" + error;\n        }\n        if (message.epState_ != null && message.hasOwnProperty(\"epState_\")) {\n            let error = $root.EpState_.verify(message.epState_);\n            if (error)\n                return \"epState_.\" + error;\n        }\n        if (message.epWrite_ != null && message.hasOwnProperty(\"epWrite_\")) {\n            let error = $root.EpWrite_.verify(message.epWrite_);\n            if (error)\n                return \"epWrite_.\" + error;\n        }\n        if (message.plDeliver != null && message.hasOwnProperty(\"plDeliver\")) {\n            let error = $root.PlDeliver.verify(message.plDeliver);\n            if (error)\n                return \"plDeliver.\" + error;\n        }\n        if (message.plSend != null && message.hasOwnProperty(\"plSend\")) {\n            let error = $root.PlSend.verify(message.plSend);\n            if (error)\n                return \"plSend.\" + error;\n        }\n        if (message.ucDecide != null && message.hasOwnProperty(\"ucDecide\")) {\n            let error = $root.UcDecide.verify(message.ucDecide);\n            if (error)\n                return \"ucDecide.\" + error;\n        }\n        if (message.ucPropose != null && message.hasOwnProperty(\"ucPropose\")) {\n            let error = $root.UcPropose.verify(message.ucPropose);\n            if (error)\n                return \"ucPropose.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a Message message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Message\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Message} Message\n     */\n    Message.fromObject = function fromObject(object) {\n        if (object instanceof $root.Message)\n            return object;\n        let message = new $root.Message();\n        switch (object.type) {\n        case \"DUMMY\":\n        case 0:\n            message.type = 0;\n            break;\n        case \"APP_REGISTRATION\":\n        case 5:\n            message.type = 5;\n            break;\n        case \"APP_PROPOSE\":\n        case 6:\n            message.type = 6;\n            break;\n        case \"APP_DECIDE\":\n        case 7:\n            message.type = 7;\n            break;\n        case \"BEB_BROADCAST\":\n        case 10:\n            message.type = 10;\n            break;\n        case \"BEB_DELIVER\":\n        case 11:\n            message.type = 11;\n            break;\n        case \"EC_NACK_\":\n        case 12:\n            message.type = 12;\n            break;\n        case \"EC_NEW_EPOCH_\":\n        case 13:\n            message.type = 13;\n            break;\n        case \"EC_START_EPOCH\":\n        case 14:\n            message.type = 14;\n            break;\n        case \"ELD_HEARTBEAT_\":\n        case 15:\n            message.type = 15;\n            break;\n        case \"ELD_RECOVERY\":\n        case 16:\n            message.type = 16;\n            break;\n        case \"ELD_TIMEOUT\":\n        case 17:\n            message.type = 17;\n            break;\n        case \"ELD_TRUST\":\n        case 18:\n            message.type = 18;\n            break;\n        case \"EP_ABORT\":\n        case 19:\n            message.type = 19;\n            break;\n        case \"EP_ABORTED\":\n        case 20:\n            message.type = 20;\n            break;\n        case \"EP_ACCEPT_\":\n        case 21:\n            message.type = 21;\n            break;\n        case \"EP_DECIDE\":\n        case 22:\n            message.type = 22;\n            break;\n        case \"EP_DECIDED_\":\n        case 23:\n            message.type = 23;\n            break;\n        case \"EP_INIT\":\n        case 24:\n            message.type = 24;\n            break;\n        case \"EP_PROPOSE\":\n        case 25:\n            message.type = 25;\n            break;\n        case \"EP_READ_\":\n        case 26:\n            message.type = 26;\n            break;\n        case \"EP_STATE_\":\n        case 27:\n            message.type = 27;\n            break;\n        case \"EP_WRITE_\":\n        case 28:\n            message.type = 28;\n            break;\n        case \"PL_DELIVER\":\n        case 29:\n            message.type = 29;\n            break;\n        case \"PL_SEND\":\n        case 30:\n            message.type = 30;\n            break;\n        case \"UC_DECIDE\":\n        case 31:\n            message.type = 31;\n            break;\n        case \"UC_PROPOSE\":\n        case 32:\n            message.type = 32;\n            break;\n        }\n        if (object.messageUuid != null)\n            message.messageUuid = String(object.messageUuid);\n        if (object.abstractionId != null)\n            message.abstractionId = String(object.abstractionId);\n        if (object.systemId != null)\n            message.systemId = String(object.systemId);\n        if (object.appRegistration != null) {\n            if (typeof object.appRegistration !== \"object\")\n                throw TypeError(\".Message.appRegistration: object expected\");\n            message.appRegistration = $root.AppRegistration.fromObject(object.appRegistration);\n        }\n        if (object.appPropose != null) {\n            if (typeof object.appPropose !== \"object\")\n                throw TypeError(\".Message.appPropose: object expected\");\n            message.appPropose = $root.AppPropose.fromObject(object.appPropose);\n        }\n        if (object.appDecide != null) {\n            if (typeof object.appDecide !== \"object\")\n                throw TypeError(\".Message.appDecide: object expected\");\n            message.appDecide = $root.AppDecide.fromObject(object.appDecide);\n        }\n        if (object.bebBroadcast != null) {\n            if (typeof object.bebBroadcast !== \"object\")\n                throw TypeError(\".Message.bebBroadcast: object expected\");\n            message.bebBroadcast = $root.BebBroadcast.fromObject(object.bebBroadcast);\n        }\n        if (object.bebDeliver != null) {\n            if (typeof object.bebDeliver !== \"object\")\n                throw TypeError(\".Message.bebDeliver: object expected\");\n            message.bebDeliver = $root.BebDeliver.fromObject(object.bebDeliver);\n        }\n        if (object.ecNack_ != null) {\n            if (typeof object.ecNack_ !== \"object\")\n                throw TypeError(\".Message.ecNack_: object expected\");\n            message.ecNack_ = $root.EcNack_.fromObject(object.ecNack_);\n        }\n        if (object.ecNewEpoch_ != null) {\n            if (typeof object.ecNewEpoch_ !== \"object\")\n                throw TypeError(\".Message.ecNewEpoch_: object expected\");\n            message.ecNewEpoch_ = $root.EcNewEpoch_.fromObject(object.ecNewEpoch_);\n        }\n        if (object.ecStartEpoch != null) {\n            if (typeof object.ecStartEpoch !== \"object\")\n                throw TypeError(\".Message.ecStartEpoch: object expected\");\n            message.ecStartEpoch = $root.EcStartEpoch.fromObject(object.ecStartEpoch);\n        }\n        if (object.eldHeartbeat_ != null) {\n            if (typeof object.eldHeartbeat_ !== \"object\")\n                throw TypeError(\".Message.eldHeartbeat_: object expected\");\n            message.eldHeartbeat_ = $root.EldHeartbeat_.fromObject(object.eldHeartbeat_);\n        }\n        if (object.eldRecovery != null) {\n            if (typeof object.eldRecovery !== \"object\")\n                throw TypeError(\".Message.eldRecovery: object expected\");\n            message.eldRecovery = $root.EldRecovery.fromObject(object.eldRecovery);\n        }\n        if (object.eldTimeout != null) {\n            if (typeof object.eldTimeout !== \"object\")\n                throw TypeError(\".Message.eldTimeout: object expected\");\n            message.eldTimeout = $root.EldTimeout.fromObject(object.eldTimeout);\n        }\n        if (object.eldTrust != null) {\n            if (typeof object.eldTrust !== \"object\")\n                throw TypeError(\".Message.eldTrust: object expected\");\n            message.eldTrust = $root.EldTrust.fromObject(object.eldTrust);\n        }\n        if (object.epAbort != null) {\n            if (typeof object.epAbort !== \"object\")\n                throw TypeError(\".Message.epAbort: object expected\");\n            message.epAbort = $root.EpAbort.fromObject(object.epAbort);\n        }\n        if (object.epAborted != null) {\n            if (typeof object.epAborted !== \"object\")\n                throw TypeError(\".Message.epAborted: object expected\");\n            message.epAborted = $root.EpAborted.fromObject(object.epAborted);\n        }\n        if (object.epAccept_ != null) {\n            if (typeof object.epAccept_ !== \"object\")\n                throw TypeError(\".Message.epAccept_: object expected\");\n            message.epAccept_ = $root.EpAccept_.fromObject(object.epAccept_);\n        }\n        if (object.epDecide != null) {\n            if (typeof object.epDecide !== \"object\")\n                throw TypeError(\".Message.epDecide: object expected\");\n            message.epDecide = $root.EpDecide.fromObject(object.epDecide);\n        }\n        if (object.epDecided_ != null) {\n            if (typeof object.epDecided_ !== \"object\")\n                throw TypeError(\".Message.epDecided_: object expected\");\n            message.epDecided_ = $root.EpDecided_.fromObject(object.epDecided_);\n        }\n        if (object.epInit != null) {\n            if (typeof object.epInit !== \"object\")\n                throw TypeError(\".Message.epInit: object expected\");\n            message.epInit = $root.EpInit.fromObject(object.epInit);\n        }\n        if (object.epPropose != null) {\n            if (typeof object.epPropose !== \"object\")\n                throw TypeError(\".Message.epPropose: object expected\");\n            message.epPropose = $root.EpPropose.fromObject(object.epPropose);\n        }\n        if (object.epRead_ != null) {\n            if (typeof object.epRead_ !== \"object\")\n                throw TypeError(\".Message.epRead_: object expected\");\n            message.epRead_ = $root.EpRead_.fromObject(object.epRead_);\n        }\n        if (object.epState_ != null) {\n            if (typeof object.epState_ !== \"object\")\n                throw TypeError(\".Message.epState_: object expected\");\n            message.epState_ = $root.EpState_.fromObject(object.epState_);\n        }\n        if (object.epWrite_ != null) {\n            if (typeof object.epWrite_ !== \"object\")\n                throw TypeError(\".Message.epWrite_: object expected\");\n            message.epWrite_ = $root.EpWrite_.fromObject(object.epWrite_);\n        }\n        if (object.plDeliver != null) {\n            if (typeof object.plDeliver !== \"object\")\n                throw TypeError(\".Message.plDeliver: object expected\");\n            message.plDeliver = $root.PlDeliver.fromObject(object.plDeliver);\n        }\n        if (object.plSend != null) {\n            if (typeof object.plSend !== \"object\")\n                throw TypeError(\".Message.plSend: object expected\");\n            message.plSend = $root.PlSend.fromObject(object.plSend);\n        }\n        if (object.ucDecide != null) {\n            if (typeof object.ucDecide !== \"object\")\n                throw TypeError(\".Message.ucDecide: object expected\");\n            message.ucDecide = $root.UcDecide.fromObject(object.ucDecide);\n        }\n        if (object.ucPropose != null) {\n            if (typeof object.ucPropose !== \"object\")\n                throw TypeError(\".Message.ucPropose: object expected\");\n            message.ucPropose = $root.UcPropose.fromObject(object.ucPropose);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Message message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Message\n     * @static\n     * @param {Message} message Message\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Message.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.type = options.enums === String ? \"DUMMY\" : 0;\n            object.messageUuid = \"\";\n            object.abstractionId = \"\";\n            object.systemId = \"\";\n            object.appRegistration = null;\n            object.appPropose = null;\n            object.appDecide = null;\n            object.bebBroadcast = null;\n            object.bebDeliver = null;\n            object.ecNack_ = null;\n            object.ecNewEpoch_ = null;\n            object.ecStartEpoch = null;\n            object.eldHeartbeat_ = null;\n            object.eldRecovery = null;\n            object.eldTimeout = null;\n            object.eldTrust = null;\n            object.epAbort = null;\n            object.epAborted = null;\n            object.epAccept_ = null;\n            object.epDecide = null;\n            object.epDecided_ = null;\n            object.epInit = null;\n            object.epPropose = null;\n            object.epRead_ = null;\n            object.epState_ = null;\n            object.epWrite_ = null;\n            object.plDeliver = null;\n            object.plSend = null;\n            object.ucDecide = null;\n            object.ucPropose = null;\n        }\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            object.type = options.enums === String ? $root.Message.Type[message.type] : message.type;\n        if (message.messageUuid != null && message.hasOwnProperty(\"messageUuid\"))\n            object.messageUuid = message.messageUuid;\n        if (message.abstractionId != null && message.hasOwnProperty(\"abstractionId\"))\n            object.abstractionId = message.abstractionId;\n        if (message.systemId != null && message.hasOwnProperty(\"systemId\"))\n            object.systemId = message.systemId;\n        if (message.appRegistration != null && message.hasOwnProperty(\"appRegistration\"))\n            object.appRegistration = $root.AppRegistration.toObject(message.appRegistration, options);\n        if (message.appPropose != null && message.hasOwnProperty(\"appPropose\"))\n            object.appPropose = $root.AppPropose.toObject(message.appPropose, options);\n        if (message.appDecide != null && message.hasOwnProperty(\"appDecide\"))\n            object.appDecide = $root.AppDecide.toObject(message.appDecide, options);\n        if (message.bebBroadcast != null && message.hasOwnProperty(\"bebBroadcast\"))\n            object.bebBroadcast = $root.BebBroadcast.toObject(message.bebBroadcast, options);\n        if (message.bebDeliver != null && message.hasOwnProperty(\"bebDeliver\"))\n            object.bebDeliver = $root.BebDeliver.toObject(message.bebDeliver, options);\n        if (message.ecNack_ != null && message.hasOwnProperty(\"ecNack_\"))\n            object.ecNack_ = $root.EcNack_.toObject(message.ecNack_, options);\n        if (message.ecNewEpoch_ != null && message.hasOwnProperty(\"ecNewEpoch_\"))\n            object.ecNewEpoch_ = $root.EcNewEpoch_.toObject(message.ecNewEpoch_, options);\n        if (message.ecStartEpoch != null && message.hasOwnProperty(\"ecStartEpoch\"))\n            object.ecStartEpoch = $root.EcStartEpoch.toObject(message.ecStartEpoch, options);\n        if (message.eldHeartbeat_ != null && message.hasOwnProperty(\"eldHeartbeat_\"))\n            object.eldHeartbeat_ = $root.EldHeartbeat_.toObject(message.eldHeartbeat_, options);\n        if (message.eldRecovery != null && message.hasOwnProperty(\"eldRecovery\"))\n            object.eldRecovery = $root.EldRecovery.toObject(message.eldRecovery, options);\n        if (message.eldTimeout != null && message.hasOwnProperty(\"eldTimeout\"))\n            object.eldTimeout = $root.EldTimeout.toObject(message.eldTimeout, options);\n        if (message.eldTrust != null && message.hasOwnProperty(\"eldTrust\"))\n            object.eldTrust = $root.EldTrust.toObject(message.eldTrust, options);\n        if (message.epAbort != null && message.hasOwnProperty(\"epAbort\"))\n            object.epAbort = $root.EpAbort.toObject(message.epAbort, options);\n        if (message.epAborted != null && message.hasOwnProperty(\"epAborted\"))\n            object.epAborted = $root.EpAborted.toObject(message.epAborted, options);\n        if (message.epAccept_ != null && message.hasOwnProperty(\"epAccept_\"))\n            object.epAccept_ = $root.EpAccept_.toObject(message.epAccept_, options);\n        if (message.epDecide != null && message.hasOwnProperty(\"epDecide\"))\n            object.epDecide = $root.EpDecide.toObject(message.epDecide, options);\n        if (message.epDecided_ != null && message.hasOwnProperty(\"epDecided_\"))\n            object.epDecided_ = $root.EpDecided_.toObject(message.epDecided_, options);\n        if (message.epInit != null && message.hasOwnProperty(\"epInit\"))\n            object.epInit = $root.EpInit.toObject(message.epInit, options);\n        if (message.epPropose != null && message.hasOwnProperty(\"epPropose\"))\n            object.epPropose = $root.EpPropose.toObject(message.epPropose, options);\n        if (message.epRead_ != null && message.hasOwnProperty(\"epRead_\"))\n            object.epRead_ = $root.EpRead_.toObject(message.epRead_, options);\n        if (message.epState_ != null && message.hasOwnProperty(\"epState_\"))\n            object.epState_ = $root.EpState_.toObject(message.epState_, options);\n        if (message.epWrite_ != null && message.hasOwnProperty(\"epWrite_\"))\n            object.epWrite_ = $root.EpWrite_.toObject(message.epWrite_, options);\n        if (message.plDeliver != null && message.hasOwnProperty(\"plDeliver\"))\n            object.plDeliver = $root.PlDeliver.toObject(message.plDeliver, options);\n        if (message.plSend != null && message.hasOwnProperty(\"plSend\"))\n            object.plSend = $root.PlSend.toObject(message.plSend, options);\n        if (message.ucDecide != null && message.hasOwnProperty(\"ucDecide\"))\n            object.ucDecide = $root.UcDecide.toObject(message.ucDecide, options);\n        if (message.ucPropose != null && message.hasOwnProperty(\"ucPropose\"))\n            object.ucPropose = $root.UcPropose.toObject(message.ucPropose, options);\n        return object;\n    };\n\n    /**\n     * Converts this Message to JSON.\n     * @function toJSON\n     * @memberof Message\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Message.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Type enum.\n     * @name Message.Type\n     * @enum {number}\n     * @property {number} DUMMY=0 DUMMY value\n     * @property {number} APP_REGISTRATION=5 APP_REGISTRATION value\n     * @property {number} APP_PROPOSE=6 APP_PROPOSE value\n     * @property {number} APP_DECIDE=7 APP_DECIDE value\n     * @property {number} BEB_BROADCAST=10 BEB_BROADCAST value\n     * @property {number} BEB_DELIVER=11 BEB_DELIVER value\n     * @property {number} EC_NACK_=12 EC_NACK_ value\n     * @property {number} EC_NEW_EPOCH_=13 EC_NEW_EPOCH_ value\n     * @property {number} EC_START_EPOCH=14 EC_START_EPOCH value\n     * @property {number} ELD_HEARTBEAT_=15 ELD_HEARTBEAT_ value\n     * @property {number} ELD_RECOVERY=16 ELD_RECOVERY value\n     * @property {number} ELD_TIMEOUT=17 ELD_TIMEOUT value\n     * @property {number} ELD_TRUST=18 ELD_TRUST value\n     * @property {number} EP_ABORT=19 EP_ABORT value\n     * @property {number} EP_ABORTED=20 EP_ABORTED value\n     * @property {number} EP_ACCEPT_=21 EP_ACCEPT_ value\n     * @property {number} EP_DECIDE=22 EP_DECIDE value\n     * @property {number} EP_DECIDED_=23 EP_DECIDED_ value\n     * @property {number} EP_INIT=24 EP_INIT value\n     * @property {number} EP_PROPOSE=25 EP_PROPOSE value\n     * @property {number} EP_READ_=26 EP_READ_ value\n     * @property {number} EP_STATE_=27 EP_STATE_ value\n     * @property {number} EP_WRITE_=28 EP_WRITE_ value\n     * @property {number} PL_DELIVER=29 PL_DELIVER value\n     * @property {number} PL_SEND=30 PL_SEND value\n     * @property {number} UC_DECIDE=31 UC_DECIDE value\n     * @property {number} UC_PROPOSE=32 UC_PROPOSE value\n     */\n    Message.Type = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"DUMMY\"] = 0;\n        values[valuesById[5] = \"APP_REGISTRATION\"] = 5;\n        values[valuesById[6] = \"APP_PROPOSE\"] = 6;\n        values[valuesById[7] = \"APP_DECIDE\"] = 7;\n        values[valuesById[10] = \"BEB_BROADCAST\"] = 10;\n        values[valuesById[11] = \"BEB_DELIVER\"] = 11;\n        values[valuesById[12] = \"EC_NACK_\"] = 12;\n        values[valuesById[13] = \"EC_NEW_EPOCH_\"] = 13;\n        values[valuesById[14] = \"EC_START_EPOCH\"] = 14;\n        values[valuesById[15] = \"ELD_HEARTBEAT_\"] = 15;\n        values[valuesById[16] = \"ELD_RECOVERY\"] = 16;\n        values[valuesById[17] = \"ELD_TIMEOUT\"] = 17;\n        values[valuesById[18] = \"ELD_TRUST\"] = 18;\n        values[valuesById[19] = \"EP_ABORT\"] = 19;\n        values[valuesById[20] = \"EP_ABORTED\"] = 20;\n        values[valuesById[21] = \"EP_ACCEPT_\"] = 21;\n        values[valuesById[22] = \"EP_DECIDE\"] = 22;\n        values[valuesById[23] = \"EP_DECIDED_\"] = 23;\n        values[valuesById[24] = \"EP_INIT\"] = 24;\n        values[valuesById[25] = \"EP_PROPOSE\"] = 25;\n        values[valuesById[26] = \"EP_READ_\"] = 26;\n        values[valuesById[27] = \"EP_STATE_\"] = 27;\n        values[valuesById[28] = \"EP_WRITE_\"] = 28;\n        values[valuesById[29] = \"PL_DELIVER\"] = 29;\n        values[valuesById[30] = \"PL_SEND\"] = 30;\n        values[valuesById[31] = \"UC_DECIDE\"] = 31;\n        values[valuesById[32] = \"UC_PROPOSE\"] = 32;\n        return values;\n    })();\n\n    return Message;\n})();\n\nexport { $root as default };\n","import net, { Server, Socket, AddressInfo } from \"net\";\nimport { Constants } from \"../utils/constants\";\n\nexport class NetworkListener {\n  private server?: Server;\n\n  constructor(private port: number) {\n    this.createServer();\n  }\n\n  private createServer() {\n    const server: Server = net.createServer();\n    this.server = server;\n\n    server.on(\"close\", () => {\n      this.onClose();\n    });\n\n    server.on(\"error\", (error) => {\n      this.handleError(error);\n    });\n\n    server.on(\"listening\", () => {\n      this.onListen();\n    });\n\n    server.on(\"connection\", (socket) => {\n      this.handleConnection(socket);\n    });\n\n    server.maxConnections = 20;\n    server.listen(this.port);\n  }\n\n  private onClose() {\n    console.log(\"Server closed.\");\n  }\n\n  private handleError(error: Error) {\n    console.error(\"--------- ⚠ SOCKET ERROR ---------\");\n    console.error(error.message);\n    console.error(error.stack);\n  }\n\n  private onListen() {\n    const address: AddressInfo = this.server?.address() as AddressInfo;\n    const port = address.port;\n    console.log(`Server listening on port ${port}.`);\n  }\n\n  private handleConnection(socket: Socket) {\n    console.log(\n      `New connection from ${socket.remoteAddress}:${socket.remotePort}`\n    );\n\n    socket.setTimeout(Constants.TIMEOUT_MILLIS, () =>\n      this.handleSocketTimeout(socket)\n    );\n\n    socket.on(\"data\", (data) => {\n      this.handleSocketData(data, socket);\n    });\n  }\n\n  private handleSocketTimeout(socket: Socket) {\n    console.log(\n      `Client from ip ${socket.remoteAddress}:${socket.remotePort} timed out.`\n    );\n    socket.end();\n  }\n\n  private handleSocketData(data: Buffer, socket: Socket) {\n    console.log(\n      `Received ${data.byteLength} bytes from ${socket.remoteAddress}:${socket.remotePort}`\n    );\n    console.log(data.toString());\n    socket.end();\n  }\n}\n","import { ProcessId, Message } from \"../models/model\";\nimport { Algorithm } from \"./algorithm\";\nimport { PerfectLink } from \"../algorithms/perfect-link\";\n\nexport class System {\n  private processes: ProcessId[] = [];\n  private algorithms: Algorithm[] = [];\n  private messages: Message[] = [];\n\n  constructor() {\n\t\tthis.algorithms = [new PerfectLink(this)];\n  }\n\n  async eventLoop() {\n    this.messages.forEach((message, index) => {\n      let isHandled = false;\n      this.algorithms.forEach((algorithm) => {\n        isHandled = isHandled || algorithm.handle(message);\n      });\n      if (isHandled) {\n        this.messages.splice(index, 1);\n      }\n    });\n  }\n\n  async newMessage(message: Message) {\n    this.messages.push(message);\n    this.eventLoop();\n  }\n}\n","export class Constants {\n\tpublic static TIMEOUT_MILLIS = 3000;\n}","module.exports = require(\"net\");","module.exports = require(\"protobufjs/minimal\");"],"sourceRoot":""}